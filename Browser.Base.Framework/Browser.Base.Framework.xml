<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Browser.Base.Framework</name>
    </assembly>
    <members>
        <member name="T:Browser.Core.Framework.BrowserExtensions">
            <summary>
            Extension methods on the IWebDriver interface.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.TakeScreenshot(OpenQA.Selenium.IWebDriver,System.String)">
            <summary>
            Takes a screenshot and saves it in the SeleniumCoreSettings.ScreenshotLocation folder location.
            </summary>
            <param name="self">The driver instance</param>
            <param name="filenamePrefix">(Optional). You can specify a prefix to add onto the screenshot file name</param>
            
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.EnterURLAndWaitForDownload(OpenQA.Selenium.IWebDriver,System.String,System.String,System.Boolean,System.Double)">
            <summary>
            Enters the URL and waits for a file to be downloaded. NOTE: Not compatible when executing tests on the Grid, as this only 
            checks the local file system for the specified file
            </summary>
            <param name="self">The web Driver.</param>
            <param name="browser">The browser.</param>
            <param name="fileName">Name of the file which will be downloaded (this should be a file name only.  It should not include any path).</param>
            <param name="deleteFirstIfExists">if set to <c>true</c> and the file already exists (prior to download), it will automatically be deleted.</param>
            <param name="fileWaitTimeout">The timeout for this operation to keep trying in milliseconds.  Default is 10000 (10 seconds).</param>
            <returns>The fully-qualified path of the downloaded file.</returns>
            <exception cref="T:System.TimeoutException">Thrown if the file does not exist within the timeout specified.</exception>
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.MobileEnabled(OpenQA.Selenium.IWebDriver)">
            <summary>
            Returns true if the driver instance is on mobile
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.MobileEnabled2(OpenQA.Selenium.IWebDriver)">
            <summary>
            Returns true if the driver instance is on mobile
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.ThrowErrorIfCurrentSiteNotCompatibleWith(OpenQA.Selenium.IWebDriver,System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="Browser"></param>
            <param name="sites"><see cref="!:Constants"/> for a list of sites with different compatabilties. Send the list of sites</param>
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.ExecuteScript(OpenQA.Selenium.IWebDriver,System.String,System.Object[])">
            <summary>
            Executes the specified javascript.
            Javascript objects that are returned are represented as an IDictionary&lt;string, object&gt;
            Javascript arrays that are returned are represented as a ReadonlyCollection&lt;object&gt;
            Therefore, if the javascript returns an array of objects, it would be represented as ReadonlyCollection&lt;IDictionary&lt;string, object&gt;&gt;
            </summary>        
            <param name="self">The the browser on which the javascript should be executed.</param>
            <param name="js">The javascript that should be executed.</param>
            <param name="parameters">(Optional) The parameters that should be passed to the script.  Note: Parameters can be accessed in your script via arguments[x] where x is the index of the parameter.  If you pass an IWebElement, it will be translated to an actual javascript reference to the DOM element.</param>
            <returns>The object returned by the javascript call.</returns>        
            <exception cref="T:System.ArgumentException">If the browser does not support javascript execution.</exception>
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.WaitForDownload(OpenQA.Selenium.IWebDriver,System.String,System.Double)">
            <summary>
            Checks for the file in the default download directory once every second until the file exists and is not locked 
            or the timeout is reached. NOTE: Not compatible when executing tests on the Grid, as this only 
            manipulates your local file system
            </summary>
            <param name="self">The web driver.</param>
            <param name="fileNameAndExtension">The name of the file with its file extension that is being downloaded.  This should be a file name only.  It should not include any path.</param>
            <param name="fileWaitTimeout">The timeout for this operation to keep trying in milliseconds.  Default is 10000 (10 seconds).</param>
            <exception cref="T:System.TimeoutException">Thrown if the file does not exist within the timeout specified.</exception>
            <returns>The fully-qualified path to the file that was downloaded.  Typically this file resides in the user's default download directory.</returns>
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.WaitForURLToMatchString(OpenQA.Selenium.IWebDriver,System.String,System.TimeSpan)">
            <summary>
            Waits until the URL matches the user-specified string
            </summary>
            <param name="self">The driver instance</param>
            <param name="url">The string you want to wait for in the URL</param>
            <param name="timeout">(Optional). If not specified, will use a default timeout of 60 seconds. After the timeout, the test will fail if the URL fails to match the string</param>
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.WaitForURLToContainString(OpenQA.Selenium.IWebDriver,System.String,System.TimeSpan)">
            <summary>
            Waits until the URL contains the user-specified string
            </summary>
            <param name="self">The driver instance</param>
            <param name="url">The string you want to wait for in the URL</param>
            <param name="timeout">(Optional). If not specified, will use a default timeout of 60 seconds. After the timeout, the test will fail if the URL fails to contain the string</param>
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.GetCapabilities(OpenQA.Selenium.IWebDriver)">
            <summary>
            Gets the capabilities of the browser.
            IMPORTANT: This method MIGHT return null!
            </summary>
            <param name="self">The self.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.GetDataFromHtmlTable(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,Browser.Core.Framework.DataColumnDefinition[])">
            <summary>        
            Gets the FORMATTED data from the html &lt;table/&gt; element as a .NET DataTable.  All cell values are represented
            as strings.
            - The table MUST have a header row &lt;thead&gt; with &lt;th&gt; elements, or you must pass in column definitions.
            
            WARNING: This is an EXPENSIVE method call!  One benchmark took 20 seconds to retrieve 100 rows and 10 columns of data.
            Consider using GetDataFromIg* methods for better performance if you don't care about the FORMAT of the data.
            </summary>
            <param name="self">The Web Browser</param>
            <param name="table">An IWebElement that represents an html table element.</param>
            <param name="columnDefinitions">(Optional) The columns to be exported.  This parameter can be used if the table does not specify columns using the &lt;thead&gt; element, or if you only want to extract a subset of the columns.</param>
            <returns>A DataTable that can be indexed using the column headers.</returns>
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.GetDataFromIgGrid(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,Browser.Core.Framework.DataColumnDefinition[])">
            <summary>
            Gets a DataTable from an igGrid control by using javascript to get the datasource and then
            converting the JSON notation into a .NET DataTable.
            </summary>
            <param name="self">The Web Browser</param>        
            <param name="element">An IWebElement that points to the specified control.</param>        
            <param name="columnDefinitions">(Optional) The columns to be retrieved.  The names and types of the columns must be compatible with the names of the properties on the javascript objects that back the ig-control</param>
            <returns>A DataTable with all of the data from the datasource of the igGrid control.</returns>
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.GetDataFromIgGrid(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,Newtonsoft.Json.JsonSerializerSettings,Browser.Core.Framework.DataColumnDefinition[])">
            <summary>
            Gets a DataTable from an igGrid control by using javascript to get the datasource and then
            converting the JSON notation into a .NET DataTable.
            </summary>
            <param name="self">The Web Browser</param>        
            <param name="element">An IWebElement that points to the specified control.</param>
            <param name="settings">Settings that control how JSON data is deserialized.</param>
            <param name="columnDefinitions">(Optional) The columns to be retrieved.  The names and types of the columns must be compatible with the names of the properties on the javascript objects that back the ig-control</param>
            <returns>A DataTable with all of the data from the datasource of the igGrid control.</returns>
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.GetDataFromIgGrid(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,Browser.Core.Framework.Data.IJsonToDataTableConverter,Browser.Core.Framework.DataColumnDefinition[])">
            <summary>
            Gets a DataTable from an igGrid control by using javascript to get the datasource and then
            converting the JSON notation into a .NET DataTable.
            </summary>
            <param name="self">The Web Browser</param>        
            <param name="element">An IWebElement that points to the specified control.</param>
            <param name="jsonConverter">The json converter that converts a json string into a DataTable.</param>
            <param name="columnDefinitions">(Optional) The columns to be retrieved.  The names and types of the columns must be compatible with the names of the properties on the javascript objects that back the ig-control</param>
            <returns>A DataTable with all of the data from the datasource of the igGrid control.</returns>
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.GetDataFromIgDataChart(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,Browser.Core.Framework.DataColumnDefinition[])">
            <summary>
            Gets a DataTable from an igDataChart control by using javascript to get the datasource and then
            converting the JSON notation into a .NET DataTable.
            </summary>
            <param name="self">The Web Browser</param>
            <param name="element">An IWebElement that points to the specified control.</param>
            <param name="columnDefinitions">(Optional) The columns to be retrieved.  The names and types of the columns must be compatible with the names of the properties on the javascript objects that back the ig-control</param>
            <returns>
            A DataTable with all of the data from the datasource of the igDataChart control.
            </returns>
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.GetDataFromIgDataChart(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,Newtonsoft.Json.JsonSerializerSettings,Browser.Core.Framework.DataColumnDefinition[])">
            <summary>
            Gets a DataTable from an igDataChart control by using javascript to get the datasource and then
            converting the JSON notation into a .NET DataTable.
            </summary>
            <param name="self">The Web Browser</param>
            <param name="element">An IWebElement that points to the specified control.</param>
            <param name="settings">Settings that control how JSON data is deserialized.</param>
            <param name="columnDefinitions">(Optional) The columns to be retrieved.  The names and types of the columns must be compatible with the names of the properties on the javascript objects that back the ig-control</param>
            <returns>
            A DataTable with all of the data from the datasource of the igDataChart control.
            </returns>
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.GetDataFromIgDataChart(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,Browser.Core.Framework.Data.IJsonToDataTableConverter,Browser.Core.Framework.DataColumnDefinition[])">
            <summary>
            Gets a DataTable from an igDataChart control by using javascript to get the datasource and then
            converting the JSON notation into a .NET DataTable.
            </summary>
            <param name="self">The Web Browser</param>
            <param name="element">An IWebElement that points to the specified control.</param>
            <param name="jsonConverter">The json converter that converts a json string into a DataTable.</param>
            <param name="columnDefinitions">(Optional) The columns to be retrieved.  The names and types of the columns must be compatible with the names of the properties on the javascript objects that back the ig-control</param>
            <returns>
            A DataTable with all of the data from the datasource of the igDataChart control.
            </returns>
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.GetDataFromIgControl(OpenQA.Selenium.IWebDriver,System.String,OpenQA.Selenium.IWebElement,Browser.Core.Framework.DataColumnDefinition[])">
            <summary>
            Gets a DataTable from an Infragistics control by using javascript to get the datasource and then
            converting the JSON notation into a .NET DataTable.
            </summary>
            <param name="self">The Web Browser</param>
            <param name="elementType">The type of Infragistics control (igGrid, igDataChart, etc)</param>
            <param name="element">An IWebElement that points to the specified control.</param>
            <param name="columnDefinitions">(Optional) The columns to be retrieved.  The names and types of the columns must be compatible with the names of the properties on the javascript objects that back the ig-control</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.GetDataFromIgControl(OpenQA.Selenium.IWebDriver,System.String,OpenQA.Selenium.IWebElement,Newtonsoft.Json.JsonSerializerSettings,Browser.Core.Framework.DataColumnDefinition[])">
            <summary>
            Gets a DataTable from an Infragistics control by using javascript to get the datasource and then
            converting the JSON notation into a .NET DataTable.
            </summary>
            <param name="self">The Web Browser</param>
            <param name="elementType">The type of Infragistics control (igGrid, igDataChart, etc)</param>
            <param name="element">An IWebElement that points to the specified control.</param>
            <param name="settings">Settings that control how JSON data is deserialized.</param>
            <param name="columnDefinitions">(Optional) The columns to be retrieved.  The names and types of the columns must be compatible with the names of the properties on the javascript objects that back the ig-control</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.BrowserExtensions.GetDataFromIgControl(OpenQA.Selenium.IWebDriver,System.String,OpenQA.Selenium.IWebElement,Browser.Core.Framework.Data.IJsonToDataTableConverter,Browser.Core.Framework.DataColumnDefinition[])">
            <summary>
            Gets a DataTable from an Infragistics control by using javascript to get the datasource and then
            converting the JSON notation into a .NET DataTable.
            </summary>
            <param name="self">The Web Browser</param>
            <param name="elementType">The type of Infragistics control (igGrid, igDataChart, etc)</param>
            <param name="element">An IWebElement that points to the specified control.</param>
            <param name="jsonConverter">The json converter that converts a json string into a DataTable.</param>
            <param name="columnDefinitions">(Optional) The columns to be retrieved.  The names and types of the columns must be compatible with the names of the properties on the javascript objects that back the ig-control</param>
            <returns>
            A DataTable with all of the data from the datasource of the infragistics control.
            </returns>
        </member>
        <member name="T:Browser.Core.Framework.BrowserMode">
            <summary>
            Specifies the mode in which the browser should be initialized
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.BrowserMode.Reuse">
            <summary>
            Re-use an existing browser session.  This saves time by not tearing down and re-creating the browser between each test.
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.BrowserMode.New">
            <summary>
            Create a new browser session
            </summary>
        </member>
        <member name="T:Browser.Core.Framework.BrowserModeAttribute">
            <summary>
            Specifies the mode in which the browser should be initialized
            <![CDATA[http://www.nunit.org/index.php?p=property&r=2.4.8]]>
            </summary>    
        </member>
        <member name="M:Browser.Core.Framework.BrowserModeAttribute.#ctor(Browser.Core.Framework.BrowserMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.BrowserModeAttribute"/> class.
            Note that the value passed to the PropertyAttribute base class must be a
            1. string
            2. int
            3. double
            The base class can only support these PRIMITIVE types
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="T:Browser.Core.Framework.BrowserNames">
            <summary>
            The browser names to use for Selenium testing.
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.BrowserNames.Chrome">
            <summary>
            Chrome
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.BrowserNames.Firefox">
            <summary>
            Firefox
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.BrowserNames.InternetExplorer">
            <summary>
            Internet Explorer
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.BrowserNames.Safari">
            <summary>
            Safari
            </summary>
        </member>
        <member name="T:Browser.Core.Framework.BrowserTest">
            <summary>
            Base class for all Selenium tests.  Handles setup and configuration to run tests against multiple
            web browsers (Chrome, Firefox, IE).
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.BrowserTest.FixtureContext">
            <summary>
            Gets the context associated with the test fixture.  There is a SEPARATE context associated with each TEST.
            You can access the test context by calling TestContext.Current within any given test.
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.BrowserTest.InitialUrl">
            <summary>
            Gets the initial URL that the browser shows upon startup in selenium.
            Most browser drivers define this, but if not we'll default to 'about:blank'.
            about:blank is supported in Chrome, Firefox, and IE
            </summary>        
        </member>
        <member name="P:Browser.Core.Framework.BrowserTest.Browser">
            <summary>
            Gets the browser for the current test.  You can specify whether to re-use an existing browser instance or force a new
            browser instance by applying the BrowserModeAttribute to the test method or test class.
            </summary>        
        </member>
        <member name="P:Browser.Core.Framework.BrowserTest.BrowserName">
            <summary>
            The name of the browser to use for this test.
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.BrowserTest.EmulationDevice">
            <summary>
            Which emulation device is being used  for this test
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.BrowserTest.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.BrowserTest"/> class.
            </summary>
            <param name="browserName">The name of the browser to use.</param>
        </member>
        <member name="M:Browser.Core.Framework.BrowserTest.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.BrowserTest"/> class,
            for remote testing against a Selenium Grid.
            </summary>
            <param name="browserName">The browser name to test.</param>
            <param name="version">The version of the browser to test.</param>
            <param name="platform">The platform to run the browser on.</param>
            <param name="hubUri">The uri of the Selenium Hub.</param>
            <param name="extrasUri">The uri for Selenium Extras.</param>
        </member>
        <member name="M:Browser.Core.Framework.BrowserTest.TestSetup">
            <summary>
            Override this method to perform setup logic that should occur before EVERY TEST
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.BrowserTest.TestTearDown">
            <summary>
            Override this method to perform cleanup that should be performed after EVERY TEST
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.BrowserTest.Setup">
            <summary>
            Override this method to perform setup logic that should be performed once per CLASS
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.BrowserTest.TearDown">
            <summary>
            Override this method to perform TearDown logic that should be performed once per CLASS
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.BrowserTest.InternetExplorerOptions">
            <summary>
            Provides a way to customize the InternetExplorer configuration
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.BrowserTest.ChromeOptions">
            <summary>
            Provides a way to customize the Chrome configuration
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.BrowserTest.FirefoxProfile">
            <summary>
            Provides a way to customize the Firefox configuration.
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.BrowserTest.FirefoxOptions">
            <summary>
            Provides a way to customize the Firefox options.
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.BrowserTest.SafariOptions">
            <summary>
            Provides a way to customize the InternetExplorer configuration
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.BrowserTest.TestSetupLogMessage(NUnit.Framework.TestContext)">
            <summary>
            Gets the message that is logged when the test begins.  
            The default is "BeginTest &gt;&gt; (TestName) - IEDRiverServer: (processcount), chromedriver: (processcount)"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.BrowserTest.TestTeardownLogMessage(NUnit.Framework.TestContext,System.TimeSpan)">
            <summary>
            Gets the message that is logged when the test begins.  
            The default is "EndTest &lt;&lt; (TestName) - (testStatus) - (elapsedTime) - IEDRiverServer: (processcount), chromedriver: (processcount)"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.BrowserTest.GetBrowserMode">
            <summary>
            Gets the CURRENT BrowserMode based on attributes applied to either the Test or the TestFixture.
            If no attributes are found, it defaults to TestProperties.BrowserModeDefault.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.BrowserTest.GetContextProperty``1(System.String,System.Func{System.Object,``0})">
            <summary>
            Gets a property value as applied to EITHER the Test OR the TestFixture.
            This allows the developer to apply attributes in EITHER location.  Attributes
            applied to a Test will take precedence over attributes applied to a TestFixture.
            <![CDATA[http://www.nunit.org/index.php?p=property&r=2.4.8]]>
            </summary>
            <typeparam name="T">The type of property value.  This is typically string, int, or double, or an enum.</typeparam>
            <param name="propertyName">Name of the property to find.</param>
            <param name="converter">(Optional): The converter that can convert from the primitive type (since NUnit only recognized string, int, double) into the specified type.  If this property is omitted, the result will simply be casted to type T.</param>
            <returns>The property (if specified) or default(T) if not.</returns>
        </member>
        <member name="M:Browser.Core.Framework.BrowserTest.CreateBrowser">
            <summary>
            Creates and initializes the browser based on the _driverType.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.BrowserTest.CleanupBrowser">
            <summary>
            Disposes the Browser if it still exists.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.BrowserTest.GetProcessCount(System.String)">
            <summary>
            Gets the count of running processes that match the given name.  Do NOT include the file extension (i.e. specify "explorer" instead of "explorer.exe").
            </summary>
            <param name="processName">Name of the process.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.BrowserTest.GetUrlOrDefault">
            <summary>
            If I lost communication with the RemoteWebDriver, I may not be able to get the url.
            I don't want to interfere with properly closing the driver, so I wrap it in a try/catch
            </summary>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.BrowserTest.ForceIEZoomLevel(OpenQA.Selenium.IWebDriver)">
            <summary>
            Forces the zoom level to be 100%.  This is important so that clicks and locations are reported
            accurately.
            </summary>
            <param name="Driver"></param>
        </member>
        <member name="T:Browser.Core.Framework.EmulationDevices">
            <summary>
            The devices we can emulate. We can add more if necessary. To get the list, open Chrome Devtools and then toggle the
            device toolbar, and then expand the device list dropdown at the top
            </summary>
        </member>
        <member name="T:Browser.Core.Framework.DataAccess">
            <summary>
            Given a data provider, IDataAccessProvider, this class provides a convenient way
            to work with data from a data source.
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.DataAccess._daProvider">
            <summary>
            The data provider to user for the data access.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.DataAccess.#ctor(Browser.Core.Framework.IDataAccessProvider)">
            <summary>
            Constructor that takes a data provider that knows how to connect to the data source.
            </summary>
            <param name="daProvider"></param>
        </member>
        <member name="M:Browser.Core.Framework.DataAccess.ExecuteNonQuery(System.String)">
            <summary>
            Execute a SQL statement against our data source.
            </summary>
            <param name="sql">The SQL to execute.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataAccess.ExecuteNonQuery(System.String,System.Int32)">
            <summary>
            Execute a SQL statement against our data source.
            </summary>
            <param name="sql">The SQL to execute.</param>
            <param name="timeout">The time, in seconds, to wait for the command to execute.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataAccess.DoExecuteNonQuery(System.String,System.Nullable{System.Int32})">
            <summary>
            Execute a SQL statement against our data source.
            </summary>
            <param name="sql">The SQL to execute.</param>
            <param name="timeout">The time, in seconds, to wait for the command to execute. 
            If null, uses the default provider command timeout value.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataAccess.GetDataValue(System.String)">
            <summary>
            Given a SQL command, return a single data value from some table, column and row.
            </summary>
            <param name="sql">The SQL that should return exactly one data value.</param>
            <returns>The value found at a given table, colun and row.</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataAccess.GetDataValue(System.String,System.Int32)">
            <summary>
            Given a SQL command, return a single data value from some table, column and row.
            </summary>
            <param name="sql">The SQL that should return exactly one data value.</param>
            <param name="timeout">The time, in seconds, to wait for the command to execute.</param>
            <returns>The value found at a given table, colun and row.</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataAccess.DoGetDataValue(System.String,System.Nullable{System.Int32})">
            <summary>
            Given a SQL command, return a single data value from some table, column and row.
            </summary>
            <param name="sql">The SQL that should return exactly one data value.</param>
            <param name="timeout">The time, in seconds, to wait for the command to execute. 
            If null, uses the default provider command timeout value.</param>
            <returns>The value found at a given table, colun and row.</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataAccess.GetDataValue``1(System.String)">
            <summary>
            Given a SQL command, return a stongly typed single data value from some table, column and row.
            </summary>
            <param name="sql">The SQL that should return exactly one data value.</param>
            <returns>The strongly typed value found at a given table, colun and row.</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataAccess.GetDataValue``1(System.String,System.Int32)">
            <summary>
            Given a SQL command, return a stongly typed single data value from some table, column and row.
            </summary>
            <param name="sql">The SQL that should return exactly one data value.</param>
            <param name="timeout">The time, in seconds, to wait for the command to execute.</param>
            <returns>The strongly typed value found at a given table, colun and row.</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataAccess.DoGetDataValue``1(System.String,System.Nullable{System.Int32})">
            <summary>
            Given a SQL command, return a stongly typed single data value from some table, column and row.
            </summary>
            <param name="sql">The SQL that should return exactly one data value.</param>
            <param name="timeout">The time, in seconds, to wait for the command to execute. 
            If null, uses the default provider command timeout value.</param>
            <returns>The strongly typed value found at a given table, colun and row.</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataAccess.GetDataRow(System.String)">
            <summary>
            Given a SQL command, return a single row from a data source table.
            </summary>
            <param name="sql">The SQL that should return exactly one row from a data source.</param>
            <returns>One data row from the data source.</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataAccess.GetDataRow(System.String,System.Int32)">
            <summary>
            Given a SQL command, return a single row from a data source table.
            </summary>
            <param name="sql">The SQL that should return exactly one row from a data source.</param>
            <param name="timeout">The time, in seconds, to wait for the command to execute.</param>
            <returns>One data row from the data source.</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataAccess.DoGetDataRow(System.String,System.Nullable{System.Int32})">
            <summary>
            Given a SQL command, return a single row from a data source table.
            </summary>
            <param name="sql">The SQL that should return exactly one row from a data source.</param>
            <param name="timeout">The time, in seconds, to wait for the command to execute. 
            If null, uses the default provider command timeout value.</param>
            <returns>One data row from the data source.</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataAccess.GetDataTable(System.String)">
            <summary>
            Given a SQL command, return many rows from a data source table.
            </summary>
            <param name="sql">The SQL that can return many rows from a data source.</param>
            <returns>A data table that represents many rows from a data source.</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataAccess.GetDataTable(System.String,System.Int32)">
            <summary>
            Given a SQL command, return many rows from a data source table.
            </summary>
            <param name="sql">The SQL that can return many rows from a data source.</param>
            <param name="timeout">The time, in seconds, to wait for the command to execute.</param>
            <returns>A data table that represents many rows from a data source.</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataAccess.DoGetDataTable(System.String,System.Nullable{System.Int32})">
            <summary>
            Given a SQL command, return many rows from a data source table.
            </summary>
            <param name="sql">The SQL that can return many rows from a data source.</param>
            <param name="timeout">The time, in seconds, to wait for the command to execute. 
            If null, uses the default provider command timeout value.</param>
            <returns>A data table that represents many rows from a data source.</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataAccess.GetDataSet(System.String)">
            <summary>
            Given a SQL command that can query many tables from the same data source, 
            return many tables into a DataSet.
            </summary>
            <param name="sql">The SQL that can return many rows from many tables from a data source</param>
            <returns>A DataSet representing many rows from many tables.</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataAccess.GetDataSet(System.String,System.Int32)">
            <summary>
            Given a SQL command that can query many tables from the same data source, 
            return many tables into a DataSet.
            </summary>
            <param name="sql">The SQL that can return many rows from many tables from a data source</param>
            <param name="timeout">The time, in seconds, to wait for the command to execute.</param>
            <returns>A DataSet representing many rows from many tables.</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataAccess.DoGetDataSet(System.String,System.Nullable{System.Int32})">
            <summary>
            Given a SQL command that can query many tables from the same data source, 
            return many tables into a DataSet.
            </summary>
            <param name="sql">The SQL that can return many rows from many tables from a data source</param>
            <param name="timeout">The time, in seconds, to wait for the command to execute. 
            If null, uses the default provider command timeout value.</param>
            <returns>A DataSet representing many rows from many tables.</returns>
        </member>
        <member name="T:Browser.Core.Framework.IDataAccessProvider">
            <summary>
            Used by the DataAccess class, this interface represents a provider
            that knows how to connect to a data source given a connection string.
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.IDataAccessProvider.ConnectionString">
            <summary>
            The string used to connect to the data source.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.IDataAccessProvider.CreateConnection">
            <summary>
            Using the connection string, connect to a data source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.IDataAccessProvider.CreateAdapter">
            <summary>
            Create a DataAdapter for the data source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.IDataAccessProvider.CreateCommandBuilder(System.Data.Common.DbDataAdapter)">
            <summary>
            Given a data adapter, create a single tabel command builder.
            </summary>
            <param name="adapter"></param>
            <returns></returns>
        </member>
        <member name="T:Browser.Core.Framework.DataAccessProvider">
            <summary>
            An abstarct class that implements the IDataAccessProvider interface.
            This is an abstract provider that can connect to a data source 
            given a connection string.
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.DataAccessProvider.ConnectionString">
            <summary>
            The string used to connect to the data source.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.DataAccessProvider.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="connectionString">The string used to connect to the data source.</param>
        </member>
        <member name="M:Browser.Core.Framework.DataAccessProvider.CreateConnection">
            <summary>
            Using the connection string, connect to a data source.
            </summary>
            <returns>A connection to the data source.</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataAccessProvider.CreateAdapter">
            <summary>
            Create a DataAdapter for the data source.
            </summary>
            <returns>A DataAdapter for the data source.</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataAccessProvider.CreateCommandBuilder(System.Data.Common.DbDataAdapter)">
            <summary>
            Given a data adapter, create a single table command builder.
            </summary>
            <param name="adapter"></param>
            <returns>A commmand builder.</returns>
        </member>
        <member name="T:Browser.Core.Framework.MySqlDataAccessProvider">
            <summary>
            An MySql implementation of the DataAccessProvider.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.MySqlDataAccessProvider.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString">The string used to connect to the data source.</param>
        </member>
        <member name="M:Browser.Core.Framework.MySqlDataAccessProvider.CreateConnection">
            <summary>
            Using the connection string, connect to a data source.
            </summary>
            <returns>A connection to the data source.</returns>
        </member>
        <member name="M:Browser.Core.Framework.MySqlDataAccessProvider.CreateAdapter">
            <summary>
            Create a DataAdapter for the data source.
            </summary>
            <returns>A DataAdapter for the data source.</returns>
        </member>
        <member name="M:Browser.Core.Framework.MySqlDataAccessProvider.CreateCommandBuilder(System.Data.Common.DbDataAdapter)">
            <summary>
            Given a data adapter, create a single table command builder.
            </summary>
            <param name="adapter"></param>
            <returns>A commmand builder.</returns>
        </member>
        <member name="T:Browser.Core.Framework.OracleDataAccessProvider">
            <summary>
            An Oracle implementation of the DataAccessProvider.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.OracleDataAccessProvider.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString">The string used to connect to the data source.</param>
        </member>
        <member name="M:Browser.Core.Framework.OracleDataAccessProvider.CreateConnection">
            <summary>
            Using the connection string, connect to a data source.
            </summary>
            <returns>A connection to the data source.</returns>
        </member>
        <member name="M:Browser.Core.Framework.OracleDataAccessProvider.CreateAdapter">
            <summary>
            Create a DataAdapter for the data source.
            </summary>
            <returns>A DataAdapter for the data source.</returns>
        </member>
        <member name="M:Browser.Core.Framework.OracleDataAccessProvider.CreateCommandBuilder(System.Data.Common.DbDataAdapter)">
            <summary>
            Given a data adapter, create a single table command builder.
            </summary>
            <param name="adapter"></param>
            <returns>A commmand builder.</returns>
        </member>
        <member name="T:Browser.Core.Framework.SqlServerDataAccessProvider">
            <summary>
            A SQL Server implementation of the DataAccessProvider.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.SqlServerDataAccessProvider.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="connectionString">The string used to connect to the data source.</param>
        </member>
        <member name="M:Browser.Core.Framework.SqlServerDataAccessProvider.CreateConnection">
            <summary>
            Using the connection string, connect to a data source.
            </summary>
            <returns>A connection to the data source.</returns>
        </member>
        <member name="M:Browser.Core.Framework.SqlServerDataAccessProvider.CreateAdapter">
            <summary>
            Create a DataAdapter for the data source.
            </summary>
            <returns>A DataAdapter for the data source.</returns>
        </member>
        <member name="M:Browser.Core.Framework.SqlServerDataAccessProvider.CreateCommandBuilder(System.Data.Common.DbDataAdapter)">
            <summary>
            Given a data adapter, create a single table command builder.
            </summary>
            <param name="adapter"></param>
            <returns>A commmand builder.</returns>
        </member>
        <member name="T:Browser.Core.Framework.DataColumnDefinition">
            <summary>
            Defines the name and type of a System.Data.DataColumn, and optionally
            specifies a value converter that can be used when loading data.
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.DataColumnDefinition.Name">
            <summary>
            The name of the column
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.DataColumnDefinition.Type">
            <summary>
            The type of the column
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.DataColumnDefinition.ValueConverter">
            <summary>
            (Optional) A value converter that will be called when populating data in the column.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.DataColumnDefinition.#ctor(System.String,System.Type,System.Func{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.DataColumnDefinition"/> class.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="type">The type of data in the column.</param>
            <param name="valueConverter">(Optional) A value converter that will be called when populating data in the column.</param>
            <exception cref="T:System.ArgumentException">name</exception>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="M:Browser.Core.Framework.DataColumnDefinition.ConvertValue(System.Object)">
            <summary>
            Converts the value using the ValueConverter property (if set).  If the ValueConverter
            property is null, the value itself is returned with no conversion.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Browser.Core.Framework.Data.DataTableBuilder">
            <summary>
            Provides methods for building a System.Data.DataTable object based on a collection of DataColumnDefinitions.
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.Data.DataTableBuilder.Columns">
            <summary>
            Gets the columns that have been defined for this datatable.  Use the AddColumn method
            to define a new column.
            </summary>        
        </member>
        <member name="M:Browser.Core.Framework.Data.DataTableBuilder.#ctor(Browser.Core.Framework.DataColumnDefinition[])">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.Data.DataTableBuilder"/> class.
            </summary>
            <param name="columnDefinitions">The column definitions.</param>
            <exception cref="T:System.ArgumentException">columnDefinitions</exception>
        </member>
        <member name="M:Browser.Core.Framework.Data.DataTableBuilder.AddColumn(Browser.Core.Framework.DataColumnDefinition)">
            <summary>
            Adds a column
            </summary>
            <param name="columnDef"></param>
        </member>
        <member name="M:Browser.Core.Framework.Data.DataTableBuilder.AddRow(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds a row.
            </summary>
            <returns>A dictionary where the key is the column name and the value is the column value.  Note that the column value should be the "uncoverted" value.  If the DataColumnDefinition defines a converter, the value will be converted when calling ToTable().</returns>
        </member>
        <member name="M:Browser.Core.Framework.Data.DataTableBuilder.ToTable(System.String)">
            <summary>
            Creates the DataTable from the rows and columns specified.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Browser.Core.Framework.Data.HtmlTableToDataTableAdapter">
            <summary>
            Converts an html &lt;table/&gt; element to a System.Data.DataTable
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Data.HtmlTableToDataTableAdapter.GetDataTable(OpenQA.Selenium.IWebElement,Browser.Core.Framework.DataColumnDefinition[])">
            <summary>
            Gets a System.Data.DataTable for the specified IWebElement
            </summary>
            <param name="element">The element for which a DataTable is desired.</param>
            <param name="columnDefinitions">(Optional) The columns to be included in the DataTable.  If this parameter is omitted, all columns will be returned.</param>
            <returns>
            A System.Data.DataTable representation of the IWebElement (this works best for things like an html table or select element)
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Browser.Core.Framework.Data.InfragisticsControlToDataTableAdapter">
            <summary>
            Converts an Infragistics IgniteUI control (igGrid, igDataChart, etc) to a System.Data.DataTable
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Data.InfragisticsControlToDataTableAdapter.#ctor(OpenQA.Selenium.IWebDriver,System.String,Browser.Core.Framework.Data.IJsonToDataTableConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.Data.InfragisticsControlToDataTableAdapter"/> class.
            </summary>
            <param name="browser">The browser.</param>
            <param name="elementType">Type of the element.</param>
            <param name="jsonConverter">The json deserializer.</param>
            <exception cref="T:System.ArgumentNullException">browser</exception>
            <exception cref="T:System.ArgumentException">elementType</exception>
        </member>
        <member name="M:Browser.Core.Framework.Data.InfragisticsControlToDataTableAdapter.GetDataTable(OpenQA.Selenium.IWebElement,Browser.Core.Framework.DataColumnDefinition[])">
            <summary>
            Gets a System.Data.DataTable for the specified IWebElement
            </summary>
            <param name="element">The element for which a DataTable is desired.</param>
            <param name="columnDefinitions">(Optional) The columns to be included in the DataTable.  If this parameter is omitted, all columns will be returned.</param>
            <returns>
            A System.Data.DataTable representation of the IWebElement (this works best for things like an html table or select element)
            </returns>
        </member>
        <member name="T:Browser.Core.Framework.Data.IJsonToDataTableConverter">
            <summary>
            Describes an object that can convert from a json string into a System.Data.DataTable.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Data.IJsonToDataTableConverter.Convert(System.String)">
            <summary>
            Converts from the jsonString into a System.Data.DataTable
            </summary>
            <param name="jsonString"></param>        
        </member>
        <member name="T:Browser.Core.Framework.Data.DefaultJsonToDataTableConverter">
            <summary>
            Default implementation of IJsonToDataTableConverter that uses JSON.Net
            by calling JsonConvert.DeserializeObject&lt;DataTable&gt;()
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Data.DefaultJsonToDataTableConverter.#ctor(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.Data.DefaultJsonToDataTableConverter"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Browser.Core.Framework.Data.DefaultJsonToDataTableConverter.Convert(System.String)">
            <summary>
            Converts from the jsonString into a System.Data.DataTable
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="T:Browser.Core.Framework.Data.IWebElementToDataTableAdapter">
            <summary>
            Describes an adapter that can generate a System.Data.DataTable, given an IWebElement
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Data.IWebElementToDataTableAdapter.GetDataTable(OpenQA.Selenium.IWebElement,Browser.Core.Framework.DataColumnDefinition[])">
            <summary>
            Gets a System.Data.DataTable for the specified IWebElement
            </summary>
            <param name="element">The element for which a DataTable is desired.</param>
            <param name="columnDefinitions">(Optional) The columns to be included in the DataTable.  If this parameter is omitted, all columns will be returned.</param>
            <returns>A System.Data.DataTable representation of the IWebElement (this works best for things like an html table or select element)</returns>
        </member>
        <member name="T:Browser.Core.Framework.RandomChartRootObject">
            <summary>
            Definitions for the datasource of a Chart element
            </summary>
        </member>
        <member name="T:Browser.Core.Framework.RandomChartDataSource">
            <summary>
            Definitions for the datasource of a Chart element
            </summary>
        </member>
        <member name="T:Browser.Core.Framework.CountryChartRootObject">
            <summary>
            Definitions for the datasource of a Chart element
            </summary>
        </member>
        <member name="T:Browser.Core.Framework.Person">
            <summary>
            Definitions for handling returned API data and for local deserialization.
            </summary>
        </member>
        <member name="T:Browser.Core.Framework.IgDataChart">
            <summary>
            Wrapper for the igDataChart control that allows accessing the datasource, series datasource, etc
            </summary>
            <seealso cref="T:Browser.Core.Framework.IgDataSourceElement" />
        </member>
        <member name="M:Browser.Core.Framework.IgDataChart.#ctor(OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebDriver)">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.IgDataChart"/> class.
            </summary>
            <param name="element">The element.</param>
            <param name="driver">The driver.</param>
        </member>
        <member name="M:Browser.Core.Framework.IgDataChart.#ctor(OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebDriver,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.IgDataChart"/> class.
            Provided for inheritance purposes
            </summary>
            <param name="element">The element.</param>
            <param name="driver">The driver.</param>
            <param name="controlName">Name of the control.</param>
        </member>
        <member name="M:Browser.Core.Framework.IgDataChart.GetSeriesDataSource``1(System.String)">
            <summary>
            Gets the DataSource for an individual series.  The igDataChart supports defining a single dataSource for all series, or individual data sources for each series.
            If the series does not has a DataSource explicitly defined then this method will return null, and you should call GetDataSource instead.
            </summary>
            <typeparam name="T">The object type for each item in the DataSource.</typeparam>
            <param name="seriesTitle">The title of the series you want to retrieve.</param>
            <returns>The DataSource as an IEnumerable of T.</returns>
        </member>
        <member name="T:Browser.Core.Framework.IgDataSourceElement">
            <summary>
            Base class for Infragistics DOM elements that contain a datasource
            </summary>
            <seealso cref="T:OpenQA.Selenium.Internal.IWrapsElement" />
            <seealso cref="T:OpenQA.Selenium.Internal.IWrapsDriver" />
        </member>
        <member name="M:Browser.Core.Framework.IgDataSourceElement.#ctor(OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebDriver,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.IgDataSourceElement"/> class.
            </summary>
            <param name="element">The element.</param>
            <param name="driver">The driver.</param>
            <param name="controlName">Name of the control.</param>
            <exception cref="T:System.ArgumentNullException">
            element
            or
            driver
            or
            controlName
            </exception>
        </member>
        <member name="P:Browser.Core.Framework.IgDataSourceElement.WrappedElement">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.IWebElement" /> wrapped by this object.
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.IgDataSourceElement.WrappedDriver">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.IWebDriver" /> used to find this element.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.IgDataSourceElement.GetDataSource``1">
            <summary>
            Gets the data source of the element.  This method retrieves the raw json data from the control
            and then uses JSON.NET to deserialize the data
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.IgDataSourceElement.IsInitialized">
            <summary>
            Returns true if the ig control has been initialized; false if otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.IgDataSourceElement.GetDataSourceJSON">
            <summary>
            Gets the data source from the ig control by calling JSON.stringify on the dataSource property.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Browser.Core.Framework.IgGrid">
            <summary>
            Wrapper for the igGrid control that allows accessing the datasource, scrolling virtualized elements into view, etc
            </summary>
            <seealso cref="T:Browser.Core.Framework.IgDataSourceElement" />
        </member>
        <member name="M:Browser.Core.Framework.IgGrid.#ctor(OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebDriver)">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.IgGrid"/> class.
            </summary>
            <param name="element">The element.</param>
            <param name="driver">The driver.</param>
        </member>
        <member name="M:Browser.Core.Framework.IgGrid.#ctor(OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebDriver,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.IgGrid"/> class.
            Provided for inheritance purposes
            </summary>
            <param name="element">The element.</param>
            <param name="driver">The driver.</param>
            <param name="controlName">Name of the control.</param>
        </member>
        <member name="M:Browser.Core.Framework.IgGrid.ScrollGridRowIntoView(System.Int32)">
            <summary>
            Scrolls the specified row into view.  This method should be used to scroll virtualized grid rows into view before interacting with them.
            </summary>
            <param name="rowIndex">Index of the row.</param>
        </member>
        <member name="M:Browser.Core.Framework.IgGrid.GetDataView``1">
            <summary>
            Returns a collection containing only the objects that are visible in the grid and in the order they appear (i.e. filtering and sorting is applied).
            </summary>
            <typeparam name="T">The object type for each item in the DataView.  This should be the same as the type you would use for GetDataSource.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.IgGrid.GetDataViewJSON">
            <summary>
            Returns a json array consisting of only the objects that are visible in the grid and in the order they appear (i.e. filtering and sorting is applied).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Browser.Core.Framework.IgTreeGrid">
            <summary>
            Wrapper for the igTreeGrid control that allows accessing the datasource, etc 
            </summary>
            <seealso cref="T:Browser.Core.Framework.IgGrid" />
        </member>
        <member name="M:Browser.Core.Framework.IgTreeGrid.#ctor(OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebDriver)">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.IgTreeGrid"/> class.
            </summary>
            <param name="element">The element.</param>
            <param name="driver">The driver.</param>
        </member>
        <member name="M:Browser.Core.Framework.IgTreeGrid.#ctor(OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebDriver,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.IgTreeGrid"/> class.
            Provided for inheritance purposes
            </summary>
            <param name="element">The element.</param>
            <param name="driver">The driver.</param>
            <param name="controlName">Name of the control.</param>
        </member>
        <member name="T:Browser.Core.Framework.WebElementExtensions">
            <summary>
            Extension methods for IWebElement
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.WebElementExtensions.ClickAndWaitForDownload(OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebDriver,System.String,System.Boolean,System.Double)">
            <summary>
            Clicks the element and waits for a file to be downloaded. NOTE: Not compatible when executing tests on the Grid, as this only 
            checks the local file system for the specified file
            </summary>
            <param name="self">The web element to be clicked.</param>
            <param name="browser">The browser.</param>
            <param name="fileName">Name of the file which will be downloaded (this should be a file name only.  It should not include any path).</param>
            <param name="deleteFirstIfExists">if set to <c>true</c> and the file already exists (prior to download), it will automatically be deleted.</param>
            <param name="fileWaitTimeout">The timeout for this operation to keep trying in milliseconds.  Default is 10000 (10 seconds).</param>
            <returns>The fully-qualified path of the downloaded file.</returns>
            <exception cref="T:System.TimeoutException">Thrown if the file does not exist within the timeout specified.</exception>
        </member>
        <member name="M:Browser.Core.Framework.WebElementExtensions.ClickJS(OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebDriver)">
            <summary>
            Performs a javascript click
            </summary>
            <param name="self">The web element to be clicked.</param>
            <param name="browser">The browser</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.WebElementExtensions.Click(OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebDriver)">
            <summary>
            Clicks using the selenium built-in click for everything except when we execute emulation tests. Right now, chromedriver has a
            bug where the selenium built-in click doesnt work consistently when running on grid. When this bug is fixed, we can remove 
            this method and refactor our test case to use the regular click with no overload
            </summary>
            <param name="self">The web element to be clicked.</param>
            <param name="browser">The browser</param>
        </member>
        <member name="M:Browser.Core.Framework.WebElementExtensions.SendKeysIfElemExists(OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebDriver,OpenQA.Selenium.By,System.String)">
            <summary>
            Checks to see if your element exists, and if so, sends user-specified or random text to it
            </summary>
            <param name="self"></param>
            <param name="Browser"></param>
            <param name="by"></param>
            <param name="textToEnter"></param>
        </member>
        <member name="M:Browser.Core.Framework.WebElementExtensions.TriggerChangeEvent(OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebDriver)">
            <summary>
            Firefox has a bug which prevents some events from being executed while the browser window is out of focus. This could be an issue
            when you're running your automation tests - which might be typing even if the window is out of focus. You will notice this issue
            if you enter text in a required field, click a button which closes a modal, and see that the modal does not close, and the system
            warsn you that the required field is empty (the field cleared because of this bug). To fix this, we have to trigger an event through
            javascript. Use this method to trigger that event. For more info, see:
            https://stackoverflow.com/questions/9505588/selenium-webdriver-is-clearing-out-fields-after-sendkeys-had-previously-populate
            </summary>
            <param name="Browser"></param>
            <param name="whatDateTxt"></param>
        </member>
        <member name="T:Browser.Core.Framework.Page">
            <summary>
            Base class for all Selenium Page-Objects
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.Page.Browser">
            <summary>
            Gets the browser in which this page is running.
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.Page.BaseUrl">
            <summary>
            Reads the base url from a config file.  This config file is typically
            updated by the TFS Build Definition during deployment.
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.Page.PageUrl">
            <summary>
            Gets the relative URL for this page (in relation to the BaseUrl)
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.Page.Url">
            <summary>
            Gets the fully qualified URL for this page
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.Page.Title">
            <summary>
            Gets the tile of the page (as displayed by the browser)
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Page.#ctor(OpenQA.Selenium.IWebDriver)">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.Page"/> class.
            </summary>
            <param name="driver">The driver.</param>
        </member>
        <member name="M:Browser.Core.Framework.Page.GoToPage(System.Boolean)">
            <summary>
            Navigates the browser to this page
            </summary>
            <param name="waitForInitialize">if set to <c>true</c> waits for the page to be "fully initilized" (networks, dates, and active sessions are loaded).</param>
        </member>
        <member name="M:Browser.Core.Framework.Page.RefreshPage(System.Boolean)">
            <summary>
            Refreshes the page.        
            </summary>
            <param name="waitForInitialize">if set to <c>true</c> waits for the page to be "fully initilized" (networks, dates, and active sessions are loaded).</param>
        </member>
        <member name="M:Browser.Core.Framework.Page.WaitForInitialize">
            <summary>
            Waits for the page to be fully loaded.  Each page should override this method
            to determine what "fully loaded" means.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Page.Verify(OpenQA.Selenium.By)">
            <summary>
            Verifies that the specified element "exists" by using the default wait timeout.
            </summary>
            <param name="by">The by.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.Page.FindElement(OpenQA.Selenium.By)">
            <summary>
            Finds the first <see cref="T:OpenQA.Selenium.IWebElement" /> using the given method.
            </summary>
            <param name="by">The locating mechanism to use.</param>
            <returns>
            The first matching <see cref="T:OpenQA.Selenium.IWebElement" /> on the current context.
            </returns>
        </member>
        <member name="M:Browser.Core.Framework.Page.FindElements(OpenQA.Selenium.By)">
            <summary>
            Finds all <see cref="T:OpenQA.Selenium.IWebElement">IWebElements</see> within the current context
            using the given mechanism.
            </summary>
            <param name="by">The locating mechanism to use.</param>
            <returns>
            A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of all <see cref="T:OpenQA.Selenium.IWebElement">WebElements</see>
            matching the current criteria, or an empty list if nothing matches.
            </returns>
        </member>
        <member name="T:Browser.Core.Framework.Platforms">
            <summary>
            The platforms to use for remote Selenium testing.
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.Platforms.Windows">
            <summary>
            Windows
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.Platforms.MAC">
            <summary>
            Windows
            </summary>
        </member>
        <member name="T:Browser.Core.Framework.Resources.BaseChromeOptions">
            <summary>
            Base ChromeOptions for a new ChromeDriver.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Resources.BaseChromeOptions.#ctor">
            <summary>
            Constructor that sets some default options without emulation
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Resources.BaseChromeOptions.#ctor(System.String)">
            <summary>
            Constructor that sets some default options with emulation
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Resources.BaseChromeOptions.SetDefaultDownloadDirectory(System.String)">
            <summary>
            
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:Browser.Core.Framework.Resources.BaseChromeOptions.SetPromptForDownload(System.Boolean)">
            <summary>
            
            </summary>
            <param name="promptForDownload"></param>
        </member>
        <member name="M:Browser.Core.Framework.Resources.BaseChromeOptions.SetDownloadDirectoryUpgrade(System.Boolean)">
            <summary>
            
            </summary>
            <param name="downloadDirectoryUpgrade"></param>
        </member>
        <member name="M:Browser.Core.Framework.Resources.BaseChromeOptions.SetEmulation(System.String)">
            <summary>
            
            </summary>
            <param name="emulation"></param>
        </member>
        <member name="T:Browser.Core.Framework.Resources.BaseFirefoxOptions">
            <summary>
            Base FirefoxOptions for a new FirefoxDriver.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Resources.BaseFirefoxOptions.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Browser.Core.Framework.Resources.BaseFirefoxProfile">
            <summary>
            Base FirefoxProfile for a new FirefoxDriver.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Resources.BaseFirefoxProfile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.Resources.BaseFirefoxProfile"/> class.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Resources.BaseFirefoxProfile.SetDownloadPreferences">
            <summary>
            Set the profile download preferences.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Resources.BaseFirefoxProfile.SetProxyPreferences">
            <summary>
            Set the profile proxy preferences.
            </summary>
        </member>
        <member name="T:Browser.Core.Framework.Resources.BaseInternetExplorerOptions">
            <summary>
            Base InternetExplorerOptions for a new InternetExplorerDriver.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Resources.BaseInternetExplorerOptions.#ctor">
            <summary>
            Default constructor that sets some default options.
            </summary>
        </member>
        <member name="T:Browser.Core.Framework.Resources.BaseSafariOptions">
            <summary>
            Base SafariOptions for a new SafariDriver
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Resources.BaseSafariOptions.#ctor">
            <summary>
            Default constructor that sets some default options.
            </summary>
        </member>
        <member name="T:Browser.Core.Framework.AppSettings">
            <summary>
            Wrapper for interacting with the App.config (or appsettings.json in .NET Core) file
            TODO: Should this live elsewhere?  Is there a better way to do this? See commented code inside individual .UITest level TestBase
            classes for another way to do it
            Private for now so it forces us to make this decision before using it elsewhere :)
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.AppSettings.GetEnumOrDefault``1(System.String,``0)">
            <summary>
            Gets the value from the app.config or web.config (or appsettings.json in .NET Core) file or returns a default value if none exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.AppSettings.GetStringOrDefault(System.String,System.String,System.String)">
            <summary>
            Gets the value from the app.config or web.config (or appsettings.json in .NET Core) file or returns a default value if none exists.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <param name="ensureTrailing">(Optional) If specified, ensures that the returned string "EndsWith" this value</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.AppSettings.GetValueOrDefault``1(System.String,``0,System.Func{System.String,``0})">
            <summary>
            Gets the value from the app.config or web.config (or appsettings.json in .NET Core) file or returns a default value if none exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key in the AppSettings section of the config file.</param>
            <param name="defaultValue">The default value to return if the config value doesn't exist.</param>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Browser.Core.Framework.AppSettings.InitConfiguration" -->
        <member name="M:Browser.Core.Framework.AppSettings.GetConfigVariableValue(System.String)">
            <summary>
            Gets the value from the variable inside appsettings.json or appsettings.environment.json
            </summary>
            <param name="variableName"></param>
            <returns></returns>
        </member>
        <member name="T:Browser.Core.Framework.SeleniumCoreSettings">
            <summary>
            Well-known settings for Selenium.Core.  These values are "keys" for retreiving the actual value
            
            Typically, these are specified in the app.config (or appsettings.json in .NET Core) file, but some may also be accessible via an attribute
            that can be applied to a test or test class.
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.SeleniumCoreSettings.DriverLocationKey">
            <summary>
            Specifies the location of the web driver executables.
            </summary>        
        </member>
        <member name="F:Browser.Core.Framework.SeleniumCoreSettings.DriverLocationDefault">
            <summary>
            The default driver location is .\Drivers
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.SeleniumCoreSettings.DriverLocation">
            <summary>
            Gets the location of the selenium drivers.  This property is guaranteed to have a trailing slash.
            </summary>        
        </member>
        <member name="F:Browser.Core.Framework.SeleniumCoreSettings.DriverLogsLocationKey">
            <summary>
            Specifies the location where driver logs will be saved.
            </summary>        
        </member>
        <member name="F:Browser.Core.Framework.SeleniumCoreSettings.DriverLogsLocationDefault">
            <summary>
            The default driver logs location is .\blah
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.SeleniumCoreSettings.DriverLogsLocation">
            <summary>
            Gets the driver logs location.  This property is guaranteed to have a trailing slash.
            </summary>        
        </member>
        <member name="F:Browser.Core.Framework.SeleniumCoreSettings.BrowserModeKey">
            <summary>
            Identifies whether to create a new browser instance or reuse an existing instance.  The default is Reuse.
            </summary>        
        </member>
        <member name="F:Browser.Core.Framework.SeleniumCoreSettings.BrowserModeDefault">
            <summary>
            The default BrowserMode is BrowserMode.Reuse because it saves several seconds per test to avoid shutting down
            and re-initializing the browser.
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.SeleniumCoreSettings.BrowserMode">
            <summary>
            Gets the browser mode to be used if not overridden at the Class or Method level by the BrowserModeAttribute.
            </summary>        
        </member>
        <member name="F:Browser.Core.Framework.SeleniumCoreSettings.DefaultDownloadDirectoryKey">
            <summary>
            The default download location that the tested browser will use when downloading a file.
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.SeleniumCoreSettings.DefaultDownloadDirectory">
            <summary>
            The default download directory that all downloads will be saved to.
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.SeleniumCoreSettings.HubUriKey">
            <summary>
            Specifies the location of the Selenium Hub.
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.SeleniumCoreSettings.DefaultHubUri">
            <summary>
            The default location of the Selenium Hub.
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.SeleniumCoreSettings.HubUri">
            <summary>
            Gets the location of the Selenium Hub.
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.SeleniumCoreSettings.ExtrasUriKey">
            <summary>
            Specifies the location for Selenium Extras.
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.SeleniumCoreSettings.DefaultExtrasUri">
            <summary>
            The default location of Selenium Extras.
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.SeleniumCoreSettings.ExtrasUri">
            <summary>
            Gets the location of Selenium Extras.
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.SeleniumCoreSettings.CommandTimeoutKey">
            <summary>
            Specifies the command timeout.
            </summary>      
        </member>
        <member name="F:Browser.Core.Framework.SeleniumCoreSettings.DefaultCommandTImeout">
            <summary>
            The default command timeout.
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.SeleniumCoreSettings.CommandTimeout">
            <summary>
            Gets the command timeout.
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.SeleniumCoreSettings.TestOutputLocationKey">
            <summary>
            Specifies the location where screenshots will be saved.
            </summary>        
        </member>
        <member name="F:Browser.Core.Framework.SeleniumCoreSettings.TestOutputLocationDefault">
            <summary>                                        
            The default screenshot location is .\TestOutput
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.SeleniumCoreSettings.TestOutputLocation">
            <summary>
            Gets the screenshot location.  This property is guaranteed to have a trailing slash.
            </summary>        
        </member>
        <member name="F:Browser.Core.Framework.SeleniumCoreSettings.ScreenShotNameFormatKey">
            <summary>
            Specifies the format to be used when naming screenshots.  Do NOT include the file extension.  All screenshots are saved as png files.
            Acceptable replacement tokens are:
            {driverName} - ChromeDriver
            {fullDriverName} - OpenQA.Selenium.Chrome.ChromeDriver
            {testName} - TestA
            {fullTestNameWithDriver} - CompName.Test.ClassA(OpenQA.Selenium.Chrome.ChromeDriver).TestA
            {className} - ClassA
            {fullClassName} - CompName.Test.ClassA
            {sessionId} - UUID of session
            {browserName} - e.g. chrome
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.SeleniumCoreSettings.ScreenShotNameFormatDefault">
            <summary>
            The default value to use when formatting screenshot names
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.SeleniumCoreSettings.ScreenShotNameFormat">
            <summary>
            Gets the screen shot name format to use when saving screenshots.
            </summary>        
        </member>
        <member name="T:Browser.Core.Framework.LocalSeleniumTestFixtureAttribute">
            <summary>
            An NUnit test that intends to locally test in a browser.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.LocalSeleniumTestFixtureAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor of a local test.
            </summary>
            <param name="browserName">The name of the browser to test from <see cref="T:Browser.Core.Framework.BrowserNames"/></param>
        </member>
        <member name="T:Browser.Core.Framework.RemoteSeleniumTestFixtureAttribute">
            <summary>
            An NUnit test that intends to remotely connect to a Selenium Grid.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.RemoteSeleniumTestFixtureAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor of a remote test.
            </summary>
            <param name="browserName">The name of the browser to test from <see cref="T:Browser.Core.Framework.BrowserNames"/></param>
            <param name="version">The version of the browser to test.</param>
            <param name="platform">The platform on which the browser should run.</param>
            <param name="hubUri">The uri of the Selenium Hub.</param>
            <param name="extrasUri">The uri for Selenium Extras.</param>
        </member>
        <member name="M:Browser.Core.Framework.APIUtils.ExecuteAPI_Post(System.String,System.String,System.String)">
            <summary>
            hguygyhg
            </summary>
            <param name="fullAPIUrl"></param>
            <param name="body"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.APIUtils.ExecuteAPI_Get(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fullAPIUrl"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.APIUtils.ExecuteAPI_Delete(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fullAPIUrl"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Browser.Core.Framework.WebDownload">
            <summary>
            This is just setting a timeout
            https://stackoverflow.com/questions/1789627/how-to-change-the-timeout-on-a-net-webclient-object
            </summary>
        </member>
        <member name="P:Browser.Core.Framework.WebDownload.Timeout">
            <summary>
            Time in milliseconds
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Assert_Custom.VerifyLabel(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,System.String,System.String)">
            <summary>
            Checks that a label is visible, and has the user-specified text and color
            </summary>
            <param name="label">The label to verify</param>
            <param name="textExpected">The text expected of the label</param>
            <param name="colorExpected">Either "Red" or "Black"</param>
        </member>
        <member name="M:Browser.Core.Framework.Assert_Custom.DateGreaterThanOrEquals(System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
            <param name="datethatShouldBeGreater"></param>
            <param name="datethatShouldBeLessThan"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.Assert_Custom.ElementsDisplayed(OpenQA.Selenium.IWebElement[])">
            <summary>
            
            </summary>
            <param name="elemsToVerify"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.Assert_Custom.StringsStartWith(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Asserts that for each string in a list of strings, that those strings start with the list of strings you pass
            </summary>
            <param name="fullStrings">The list of strings with full text</param>
            <param name="matchedStrings">The list of strings you want to Assert start with the full text strings</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.Assert_Custom.Grid_AllRowsContainStringWithinCell(Browser, OpenQA.Selenium.IWebElement,OpenQA.Selenium.By,System.Int32,System.String,System.String)">
            <summary>
            Asserts that a specified string is contained within all cells of all rows within a user-specified column, 
            case-insensitive
            </summary>
            <param name="tblBodyElem">The table body element that is found within the your Page 
            class. Note that this works on almost all applications by using the Tbody element. We use the tbody element 
            in most cases because if we instead used the table element, then the thead element would interfere with 
            the indexes. If your application represents rows with tbodies instead of trs, then this wont work</param>
            <param name="firstRow">Send any row in it's By type (Most likely just send a generic row 'tableId/tr' in
            the table. i.e. Bys.CBDObserverPage,PendingAcceptanceTblRowBody. We need any row so that we can wait for 
            it to appear before proceeding with the test"/></param>   
            <param name="colIndex">The zero-based index of the column you want to extract the text from.</param>
            <param name="tagNameWhereTargetedCellTextExists">(Optional). The HTML tag name where you are extracting the cell 
            text from. Default = 'td'</param>
            <param name="stringToVerify">The string you want to verify is contained within listString</param>
        </member>
        <member name="T:Browser.Core.Framework.AutoItUtils">
            <summary>
            A utility class for operating system-level functions
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.AutoItUtils.RunAutoItScript(System.String,System.String[])">
            <summary>
            Runs any AutoIt script that you create. For an example, see: https://code.premierinc.com/docs/display/PGHLMSDOCS/Uploading+Files
            </summary>
            <param name="scriptFileLocation">The AutoIt script file. For example, our upload script is called FileUpload.au3 and should be located here: C:\SeleniumAutoIt\FileUpload.au3</param>
            <param name="arguments">The list of strings you want to pass as arguments to the AutoIt script. You can test this out in the CMD line of windows. i.e. Inside the command prompt, navigate to the script location, then type the script name with it's parameters: fileupload.exe "internetexplorer" "c:\seleniumautoit.exe"</param>
        </member>
        <member name="T:Browser.Core.Framework.CollectionUtils">
            <summary>
            A utility class for useful collection logic.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determine if an IEnumerable is Null or Empty.
            </summary>
            <typeparam name="T">Generic type of IEnumerable items.</typeparam>
            <param name="enumerable">IEnumerable of objects.</param>
            <returns>True if the enumerable is Null or empty.</returns>
        </member>
        <member name="M:Browser.Core.Framework.CollectionUtils.SequenceEqualOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether two sequences are equal by comparing the elements by using
            the default equality comparer for their type. Also true if both sequences are null.
            </summary>
            <typeparam name="T">The type of sequence to compare.</typeparam>
            <param name="a">The first sequence.</param>
            <param name="b">The second seqeunce.</param>
            <returns>True if the two source sequences are both null or of equal length and their corresponding
            elements are equal according to the default equality comparer for their type;
            otherwise, false.</returns>
        </member>
        <member name="M:Browser.Core.Framework.CollectionUtils.SequenceEqualOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether two sequences are equal by comparing the elements by using
            the given equality comparer for their type. Also true if both sequences are null.
            </summary>
            <typeparam name="T">The type of sequence to compare.</typeparam>
            <param name="a">The first sequence.</param>
            <param name="b">The second seqeunce.</param>
            <returns>True if the two source sequences are both null or of equal length and their corresponding
            elements are equal according to the given equality comparer for their type;
            otherwise, false.</returns>
        </member>
        <member name="M:Browser.Core.Framework.CollectionUtils.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Creates a DataTable equivalent of an IEnumerable for a single column.  The DataColumn.DataType will
            be typeof(T).  This method works BEST for value types like int, string, DateTime, etc, but will “work” for any type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">The self.</param>
            <param name="columnName">Name of the column.</param>
            <returns>A DataTable equivalent of an IEnumerable for a single column.</returns>
            <exception cref="T:System.ArgumentNullException">self, columnName</exception>
            <exception cref="T:System.ArgumentException">if columnName is empty</exception>
        </member>
        <member name="M:Browser.Core.Framework.CollectionUtils.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a DataTable for the specified IEnumerable.  For value types (and string/stringbuilder) this method will create a datatable
            with a single column.  For complex types, it will use reflection and create a column for each property.  The type of each column
            will match the property type (even if the property type is a complex type).
            </summary>
            <typeparam name="T">The type of elements in the collection</typeparam>
            <param name="self">The collection</param>
            <returns>A DataTable equivalent of an IEnumerable.</returns>
        </member>
        <member name="T:Browser.Core.Framework.AndCriteria`1">
            <summary>
            A composite criteria that is met only if ALL sub-criteria are met
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Browser.Core.Framework.ICriteria`1" />
        </member>
        <member name="M:Browser.Core.Framework.AndCriteria`1.#ctor(Browser.Core.Framework.ICriteria{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.AndCriteria`1"/> class.
            </summary>
            <param name="criteria">The "sub-criteria".  This criteria is considered met only if ALL sub-criteria are met.</param>
        </member>
        <member name="P:Browser.Core.Framework.AndCriteria`1.Description">
            <summary>
            Gets the description that is displayed in the test output if this criteria is not met.
            </summary>        
        </member>
        <member name="M:Browser.Core.Framework.AndCriteria`1.GetDescription(`0)">
            <summary>
            Gets the description that is displayed in the test output if this criteria is not met.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.AndCriteria`1.IsMet(`0)">
            <summary>
            Determines whether the specified input meets this criteria (by ensuring that it meets ALL sub-criteria).
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:Browser.Core.Framework.ICriteria`1">
            <summary>
            Interface that defines whether certain conditions are met for a given object.
            This interface was created in order to create friendlier error logs when Selenium times
            out waiting for an object or searching for an object.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Browser.Core.Framework.ICriteria`1.Description">
            <summary>
            Gets the description that is printed in the error logs if this criteria is not met.
            </summary>        
        </member>
        <member name="M:Browser.Core.Framework.ICriteria`1.GetDescription(`0)">
            <summary>
            Gets the description that is printed in the error logs if this criteria is not met.
            This overload of Description can provide additional context given the current input
            that is being compared against the criteria.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ICriteria`1.IsMet(`0)">
            <summary>
            Determines whether the specified input matches this criteria.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:Browser.Core.Framework.Criteria">
            <summary>
            Static helper methods for combining criteria (AND/OR/NOT)
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Criteria.NOT``1(Browser.Core.Framework.ICriteria{``0})">
            <summary>
            Negates the specified criteria
            </summary>
            <typeparam name="T"></typeparam>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.Criteria.AND``1(Browser.Core.Framework.ICriteria{``0}[])">
            <summary>
            Creates an ICriteria that returns true when ALL of the specified criteria
            are true
            </summary>
            <typeparam name="T"></typeparam>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.Criteria.AND``1(Browser.Core.Framework.ICriteria{``0},Browser.Core.Framework.ICriteria{``0})">
            <summary>
            Convenience method for AND'ing two criteria together
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.Criteria.OR``1(Browser.Core.Framework.ICriteria{``0}[])">
            <summary>
            Creates an ICriteria that returns true when ANY of the specified criteria
            are true
            </summary>
            <typeparam name="T"></typeparam>
            <param name="criteria">The criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.Criteria.OR``1(Browser.Core.Framework.ICriteria{``0},Browser.Core.Framework.ICriteria{``0})">
            <summary>
            Convenience method for OR'ing two criteria together
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Browser.Core.Framework.Criteria`1">
            <summary>
            Class that uses a lambda expression to represent a criteria for a particular object
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Browser.Core.Framework.Criteria`1.Description">
            <summary>
            Gets the description for this critieria.  This will be printed in the output
            if a test fails because a criteria was not matched.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Criteria`1.GetDescription(`0)">
            <summary>
            Gets the description that is printed in the error logs if this criteria is not met.
            This overload of Description can provide additional context given the current input
            that is being compared against the criteria.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.Criteria`1.IsMet(`0)">
            <summary>
            Returns a value that indicates whether or not the criteria was met
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.Criteria`1.#ctor(System.Func{`0,System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.Criteria`1"/> class.
            </summary>
            <param name="isMet">A lambda expression that will evaluate to true if the criteria is met.</param>
            <param name="description">The description that will be printed in the error logs if this criteria is not met.</param>
            <exception cref="T:System.ArgumentNullException">
            isMet
            or
            description
            </exception>
        </member>
        <member name="T:Browser.Core.Framework.CriteriaExtensions">
            <summary>
            Extension methods for making it easier to work with collections of criteria.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.CriteriaExtensions.MeetsAll``1(System.Collections.Generic.IEnumerable{Browser.Core.Framework.ICriteria{``0}},``0)">
            <summary>
            Gets a value that indicates whether ALL the criteria were met
            </summary>
            <param name="criteria">The criteria to be evaluated.</param>
            <param name="input">The input against which the criteria will be evaluated.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.CriteriaExtensions.MeetsAll``1(``0,Browser.Core.Framework.ICriteria{``0}[])">
            <summary>
            Gets a value that indicates whether ALL the criteria were met
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">The input against which the criteria will be evaluated.</param>
            <param name="criteria">The criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.CriteriaExtensions.MeetsAny``1(System.Collections.Generic.IEnumerable{Browser.Core.Framework.ICriteria{``0}},``0)">
            <summary>
            Gets a value that indicates whether ANY of the criteria were met
            </summary>
            <typeparam name="T"></typeparam>
            <param name="criteria">The criteria to be evaluated.</param>
            <param name="input">The input against which the criteria will be evaluated.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.CriteriaExtensions.MeetsAny``1(``0,Browser.Core.Framework.ICriteria{``0}[])">
            <summary>
            Gets a value that indicates whether ANY of the criteria were met
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">The element against which the criteria will be evaluated.</param>
            <param name="criteria">The criteria to be evaluated.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.CriteriaExtensions.Failures``1(System.Collections.Generic.IEnumerable{Browser.Core.Framework.ICriteria{``0}},``0)">
            <summary>
            Gets all of the criteria that were not met by the element.
            </summary>
            <param name="criteria"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.CriteriaExtensions.Description``1(System.Collections.Generic.IEnumerable{Browser.Core.Framework.ICriteria{``0}})">
            <summary>
            Gets the default description for the specified criteria
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">The the criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.CriteriaExtensions.Description``1(System.Collections.Generic.IEnumerable{Browser.Core.Framework.ICriteria{``0}},``0)">
            <summary>
            Gets the description for the specified criteria given the specified input.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">The criteria.</param>
            <param name="input">The input against which the criteria are/were/will be evaluated.</param>
            <returns></returns>
        </member>
        <member name="T:Browser.Core.Framework.ElementCriteria">
            <summary>
            Defines typical criteria for interacting with IWebElements.  These criteria
            can be passed as parameters to some of the "Wait" methods.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.ElementCriteria.#ctor(System.Func{OpenQA.Selenium.IWebElement,System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.ElementCriteria"/> class.
            </summary>
            <param name="func">The function.</param>
            <param name="description">The description.</param>
            <exception cref="T:System.ArgumentNullException">
            description
            or
            func
            </exception>
        </member>
        <member name="M:Browser.Core.Framework.ElementCriteria.HasAttribute(System.String)">
            <summary>
            Ensures that the IWebElement has the specified attribute defined.
            </summary>
            <param name="attributeName">The name of the attribute</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElementCriteria.AttributeValue(System.String,System.String,System.Boolean)">
            <summary>
            Ensures that the element's attribute matches the specified value
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="value">The value.</param>
            <param name="ignoreCase">if set to <c>true</c> the value is case-insensitive.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElementCriteria.AttributeValue(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Ensures that the element's attribute matches AT LEAST ONE of the specified values
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="values">The values.</param>
            <param name="ignoreCase">if set to <c>true</c> the values are case-insensitive.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">values</exception>
            <exception cref="T:System.ArgumentException">You must specify at least one value;values</exception>
        </member>
        <member name="M:Browser.Core.Framework.ElementCriteria.AttributeValueContains(System.String,System.String)">
            <summary>
            Ensures that the element's attribute contains the specified value
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElementCriteria.AttributeValueContains(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ensures that the element's attribute matches AT LEAST ONE of the specified values
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="values">The values.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">values</exception>
            <exception cref="T:System.ArgumentException">You must specify at least one value;values</exception>
        </member>
        <member name="M:Browser.Core.Framework.ElementCriteria.AttributeValueNotContains(System.String,System.String)">
            <summary>
            Ensures that the element's attribute contains the specified value
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElementCriteria.AttributeValueNotContains(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ensures that the element's attribute matches AT LEAST ONE of the specified values
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="values">The values.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">values</exception>
            <exception cref="T:System.ArgumentException">You must specify at least one value;values</exception>
        </member>
        <member name="M:Browser.Core.Framework.ElementCriteria.AttributeValueNot(System.String,System.String,System.Boolean)">
            <summary>
            Ensures that the element's attribute does not match the specified value
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="value">The value.</param>
            <param name="ignoreCase">if set to <c>true</c> the value is case-insensitive.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElementCriteria.AttributeValueNot(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Ensures that the element's attribute does not matches AT LEAST ONE of the specified values
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="values">The values.</param>
            <param name="ignoreCase">if set to <c>true</c> the values are case-insensitive.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">values</exception>
            <exception cref="T:System.ArgumentException">You must specify at least one value;values</exception>
        </member>
        <member name="M:Browser.Core.Framework.ElementCriteria.AttributeHasValue(System.String)">
            <summary>
            Ensures that the attribute exists and has some type of value (i.e. is not null or empty)
            </summary>
            <param name="name">The name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElementCriteria.AttributeNotExists(System.String)">
            <summary>
            Ensures that the element does not have an attribute
            </summary>
            <param name="name">The name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="F:Browser.Core.Framework.ElementCriteria.IsVisible">
            <summary>
            Ensures that the element is visible (not hidden)
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.ElementCriteria.IsNotVisible">
            <summary>
            Ensures that the element is not visible
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.ElementCriteria.IsEnabled">
            <summary>
            Ensures that the element is enabled
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.ElementCriteria.IsSelected">
            <summary>
            Ensures that the element is selected.  This only applies to input elements
            such as checkboxes, options in a select, and radio buttons.
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.ElementCriteria.SelectElementHasMoreThan1Item">
            <summary>
            Ensures that the select element (dropdown) has at LEAST 2 items in it's dropdown list.
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.ElementCriteria.SelectElementHasAtLeast1Item">
            <summary>
            Ensures that the select element (dropdown) has at LEAST 2 items in it's dropdown list.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.ElementCriteria.Text(System.String,System.Boolean)">
            <summary>
            Ensures that the text of the element matches the specified value
            </summary>
            <param name="value">The value.</param>
            <param name="ignoreCase">if set to <c>true</c> the comparison is case-insensitive.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElementCriteria.TextNotEquals(System.String)">
            <summary>
            Ensures that the text of the element matches the specified value
            </summary>
            <param name="value">The value.</param>
            <param name="ignoreCase">if set to <c>true</c> the comparison is case-insensitive.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElementCriteria.TextContains(System.String)">
            <summary>
            Ensures that the text of the element contains the specified text
            </summary>
            <param name="value">The text value.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElementCriteria.Text(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Ensures that the text of the element matches AT LEAST ONE of the specified values
            </summary>
            <param name="values">The values.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">values</exception>
            <exception cref="T:System.ArgumentException">You must specify at least one value;values</exception>
        </member>
        <member name="F:Browser.Core.Framework.ElementCriteria.HasText">
            <summary>
            Ensures that the element has ANY text (i.e. is not null or empty)
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.ElementCriteria.Exists(OpenQA.Selenium.ISearchContext,OpenQA.Selenium.By)">
            <summary>
            Gets a criteria that indicates whether or not an element exists within the given scope
            </summary>
            <param name="context"></param>
            <param name="by"></param>
            <returns></returns>
        </member>
        <member name="T:Browser.Core.Framework.OrCriteria`1">
            <summary>
            A composite criteria that is met only if ANY sub-criteria are met
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Browser.Core.Framework.ICriteria`1" />
        </member>
        <member name="M:Browser.Core.Framework.OrCriteria`1.#ctor(Browser.Core.Framework.ICriteria{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.OrCriteria`1"/> class.
            </summary>
            <param name="criteria">The criteria.</param>
        </member>
        <member name="P:Browser.Core.Framework.OrCriteria`1.Description">
            <summary>
            Gets the description that is printed in the error logs if this criteria is not met.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.OrCriteria`1.GetDescription(`0)">
            <summary>
            Gets the description that is printed in the error logs if this criteria is not met.
            This overload of Description can provide additional context given the current input
            that is being compared against the criteria.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.OrCriteria`1.IsMet(`0)">
            <summary>
            Determines whether the specified input matches this criteria.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.DataUtils.ConvertStateAbbreviationToName(System.String)">
            <summary>
            Returns the full name of the state based on the abbreviation
            </summary>
            <param name="state">The abbreviation of the state</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.DataUtils.GetDescription(System.Enum)">
            <summary>
            Gets the text of the Description for any enum that has a description
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.DataUtils.GetDateForCalendarElem(System.DateTime)">
            <summary>
            Returns 3 key-value pairs to use with our Date controLifetimeSupport_Sandbox. 
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.DataUtils.GetRandomDateBetween(System.DateTime,System.DateTime)">
            <summary>
            Returns a random date between 2 dates
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.DataUtils.intsEqual(System.Int32[])">
            <summary>
            Compares a group of integers and returns true if they are equal
            </summary>
            <param name="ints"> integers</param>
            <returns> if all ints are equals will return true otherwise false</returns>
        </member>
        <member name="M:Browser.Core.Framework.DataUtils.GetRandomIntegerWithinRange(System.Int32,System.Int32)">
            <summary>
            Returns a random integer from the range of values below the user-specified maximum value. 
            If 0 is passed for minValue and 3 for maxValue, then this will return either 0, 1, or 2
            </summary>
            <param name="minValue">The minimum value of the range</param>
            <param name="maxValue">The maximum value of the range</param>
        </member>
        <member name="M:Browser.Core.Framework.DataUtils.GetRandomInteger(System.Int32)">
            <summary>
            Returns a random integer from the range of values below the user-specified maximum value
            </summary>
            <param name="maxValue">The maximum value of integers that you want to return. i.e. if you pass 2, the method will return either 1 or 2</param>
        </member>
        <member name="M:Browser.Core.Framework.DataUtils.GetRandomIntegerStartingAtZero(System.Int32)">
            <summary>
            Returns a random integer from the range of values below the user-specified maximum value
            </summary>
            <param name="maxValue">The maximum value of integers that you want to return. i.e. if you pass 2, the method will return either 1 or 2</param>
        </member>
        <member name="M:Browser.Core.Framework.DataUtils.GetRandomString(System.Int32)">
            <summary>
            
            </summary>
            <param name="sizeOfString"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.DataUtils.DataRowsToListString(System.Data.DataRowCollection,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="rows"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.DataUtils.GetDatatableCellByRowNumAndColName(System.Data.DataTable,System.Int32,System.String)">
            <summary>
            Returns the cell text in a datatable
            </summary>
            <param name="datatable">Your datatable</param>
            <param name="rowNumber">The zero-based index row number </param>
            <param name="columnName">The column name</param>
        </member>
        <member name="M:Browser.Core.Framework.DataUtils.GetDataTableCellByRecNameAndColName(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            Returns the cell text in a datatable
            </summary>
            <param name="datatable">Your datatable</param>
            <param name="colNameBelongingToRecord">The column name of the first column from the DataTable</param>
            <param name="recordName">The row name, or in other words, the text inside the cell of the row you are targeting</param>
            <param name="colNameOfReturningCell">The column name of the column that you are targeting to get the cell text from</param>
        </member>
        <member name="M:Browser.Core.Framework.DataUtils.ConvertNumberToStringWithCommas(System.Int64)">
            <summary>
            Utility used for minor string conversions to match data found in pivot grids.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:Browser.Core.Framework.DataTableColumnBehavior">
            <summary>
            Defines the behavior to use when serializing an object to a DataColumn
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.DataTableColumnBehavior.Default">
            <summary>
            The default behavior uses a single column for: string, StringBuilder, and all value types (including structs and enums).
            For all reference types, the adapter uses reflection and creates a column for each property on the object.
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.DataTableColumnBehavior.SingleColumn">
            <summary>
            Forces the adapter to create a single column, no matter what the type is.
            </summary>
        </member>
        <member name="T:Browser.Core.Framework.IDataTableAdapter`1">
            <summary>
            Defines the behavior for converting a collection of objects to a DataTable
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Browser.Core.Framework.IDataTableAdapter`1.ToDataTable(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Converts the collection of items to a DataTable.
            </summary>
            <param name="items">The items to be converted.</param>
            <returns></returns>
        </member>
        <member name="T:Browser.Core.Framework.DefaultDataTableAdapter`1">
            <summary>
            Base class for converting an IEnumerable into a System.Data.DataTable
            
            For "simple types" (value types, string, and stringbuilder) this will create a
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Browser.Core.Framework.DefaultDataTableAdapter`1.#ctor(Browser.Core.Framework.DataTableColumnBehavior,System.Reflection.BindingFlags,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.DefaultDataTableAdapter`1"/> class.
            </summary>
            <param name="behavior">The behavior to use when generating columns.</param>
            <param name="bindingFlags">The binding flags to use when evaluating the properties to be serialized.</param>
            <param name="propertyFilter">The property filter that can limit which properties are serialized.</param>
        </member>
        <member name="M:Browser.Core.Framework.DefaultDataTableAdapter`1.ToDataTable(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Converts the specified collection to a System.Data.DataTable
            </summary>
            <param name="items">The items.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">items</exception>
        </member>
        <member name="M:Browser.Core.Framework.DefaultDataTableAdapter`1.GetColumns">
            <summary>
            Gets the columns to be used in the DataTable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.DefaultDataTableAdapter`1.CreateColumn(System.String,System.Type)">
            <summary>
            Creates a DataColumn with the specified name and type.  Also handles nullable types
            as a DataColumn does not allow nullable types.  In case of a nullable type, the "inner"
            type will be used (note that ANY DataColumn can be nullable).
            </summary>
            <param name="colName">Name of the column.</param>
            <param name="dataType">The datatype of the column.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Browser.Core.Framework.DefaultDataTableAdapter`1.GetColumnValue(System.Data.DataColumn,`0)">
            <summary>
            Gets the value for a specified column, given the row object.
            </summary>
            <param name="column">The column.</param>
            <param name="row">The object.</param>
            <returns>If the column value is null, returns DBNull.Value; otherwise, returns the actual value.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Browser.Core.Framework.DefaultDataTableAdapter`1.IsSingleColumn(System.Type)">
            <summary>
            Gets whether or not the specified type can be represented by a single DataTable column
            By default, this returns <c>true</c> for string, StringBuilder, and all value types; <c>false</c> for everything else.
            This may also return true if the caller explicitly asked for a single column.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Browser.Core.Framework.ElemGet">
            <summary>
            A utility class retreiving data and attributes from elements
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.ChkBx_GetCheckBox(OpenQA.Selenium.IWebDriver,System.String,System.Int32)">
            <summary>
            Gets the check box element based on it's label text. 
            </summary>
            <param name="browser">The driver instance</param>
            <param name="textOfChkBx">The exact text of one of the radio buttons inside</param>
            <param name="indexOfCheckBoxWithSameText">If there are multiple check boxes on the same page with the same text, you can specify
            at which index you want to click</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.ChkBx_GetCheckBox(OpenQA.Selenium.IWebDriver,System.String,OpenQA.Selenium.IWebElement,System.Int32)">
            <summary>
            Gets the check box element based on it's label text within the parent element
            </summary>
            <param name="browser">The driver instance</param>
            <param name="textOfChkBx">The exact text of one of the radio buttons inside</param>
            <param name="ParentElem">The parent element to find your check box in</param>
            <param name="indexOfCheckBoxWithSameText">If there are multiple check boxes on the same page with the same text, you can specify
            at which index you want to click</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Browser.Core.Framework.ElemGet.ChkBx_GetCheckBoxes(OpenQA.Selenium.IWebDriver,System.String,OpenQA.Selenium.IWebElement)" -->
        <member name="M:Browser.Core.Framework.ElemGet.ChkBx_IsDisplayedOnListItem(OpenQA.Selenium.IWebElement,System.String)">
            <summary>
            Determines whether a list item within a dropdown has been checked or not
            </summary>
            <param name="elem">The dropdown element</param>
            <param name="itemName">The text attribute value of the list item element</param>
            <returns>True if checkbox is checked, false if not</returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.DropdownCustom_MultiSelect_LITextToDataTable(OpenQA.Selenium.IWebElement)">
            <summary>
            Returns a Datatable representing multi-select select element. The control must be expanded for this method to work, as the Text property of the
            LI items do not get populated until the drop down is expanded
            </summary>
            <param name="elem">The element to grab the list of items from. It must be of type IWebElement, not SelectElement</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.DropdownCustom_ListItemTextByIndex(OpenQA.Selenium.IWebElement,System.Int32)">
            <summary>
            Returns the text of an LI element from a dropdown control
            </summary>
            <param name="elem">The element from which you are selecting from. It must be of type IWebElement, not SelectElement</param>
            <param name="index">The index (zero based) of the LI (list item) that you want to grab the text from</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Browser.Core.Framework.ElemGet.DropdownCustom_MultiSelect_LITextToListString(OpenQA.Selenium.IWebElement)" -->
        <member name="M:Browser.Core.Framework.ElemGet.SelElem_ListTextToDataTable(OpenQA.Selenium.Support.UI.SelectElement)">
            <summary>
            Returns Datatable representing single-select SelectElement
            </summary>
            <param name="elem">The element to grab the list of items from. It must be of type SelectElement</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.SelElem_ListTextToListString(OpenQA.Selenium.Support.UI.SelectElement)">
            <summary>
            Returns a Datatable from your Select Element. Note that this method trims consecutive spaces from the list of strings. So if you are comparing this
            list to anything else, make sure you trim the consecutive spaces off of that comparison object as well
            </summary>
            <param name="elem">The element to grab the list from. Must be an element with a Select tag in the HTML</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.SelElem_ContainsText(OpenQA.Selenium.Support.UI.SelectElement,System.String)">
            <summary>
            If any of the items in the select element contain the user specified text, return true, else return false
            </summary>
            <param name="elem">The select element</param>
            <param name="textToSearchFor">The text you want to verify exists in the select element</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.SelElem_GetCountOfItemsContainingText(OpenQA.Selenium.Support.UI.SelectElement,System.String)">
            <summary>
            Gets the count of items in the select element containing the user specified text
            </summary>
            <param name="elem">The select element</param>
            <param name="textToSearchFor">The text you want to check for</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.SelElem_GetFirstItemContainingText(OpenQA.Selenium.Support.UI.SelectElement,System.String)">
            <summary>
            Gets the first element in a select element containing the user specified text
            </summary>
            <param name="elem">The select element</param>
            <param name="textToSearchFor">The text you want to check for</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.SelElem_ListTextTrimmedToDataTable(OpenQA.Selenium.Support.UI.SelectElement,System.String)">
            <summary>
            Returns a Datatable from your Select Element, with a user-specified parameter to trim any text in the string
            </summary>
            <param name="elem">The element to grab the list from. Must be an element with a Select tag in the HTML</param>
            <param name="textToRemove">The text you want to remove from the string</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.SelElem_ListTextToArray(OpenQA.Selenium.Support.UI.SelectElement)">
            <summary>
            Returns a list of strings from your Select Element. Until this code is refactored to become faster,  Only use this
            on a small list, preferably under 30 items. Otherwise, it will take a long time to complete. An alternative is to use
            the SelectElementListItemTextToDataTable method
            </summary>
            <param name="elem">The element to grab the list from. Must be anelement with a Select tag in the HTML</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.Grid_GetCellTextByRowNameAndColName(Browser, OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebElement,OpenQA.Selenium.By,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns the cell text from a user-specified row name and column name. This has been created for RCP, so this may or may not be compatible
            with other applications right now. If it is not, we can refactor this to make it compatible
            </summary>
            <param name="tblElem">You table element that is found within the your Page class. i.e. OP.PendingAcceptanceTbl</param>
            <param name="theadElem">You table header (thead) element that is found within the your Page class. 
            i.e. OP.PendingAcceptanceTbl</param>
            <param name="rowElemBy">Send any row of your table in it's By type (Most likely just 
            send the generic row 'tableId/tr' in the table) i.e. Bys.CBDObserverPage,PendingAcceptanceTblRowBody. 
            We need any row so that we can wait for it to appear before proceeding with the test"/></param>
            <param name="firstColumnCellText">The name of the row where you are looking for the cell text. i.e. The exact 
            text from cell inside the table's first column for the row you are targeting</param>
            <param name="tagNameWhereFirstColCellTextExists">The HTML tag name where the firstColumnCellText exists</param>
            <param name="colName">The name of the column header for the column you want to extract the text from</param>
            <param name="tagNameWhereColNameTextExists">(Optional). The HTML tag name where the colName exists. 
            Default = 'th'</param>
            <param name="tagNameWhereTargetedCellTextExists">(Optional). The HTML tag name where you are extracting the cell 
            text from. Default = 'td'</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.Grid_GetCellTextByRowIndexAndColName(OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebElement,System.Int32,System.String,System.String,System.String)">
            <summary>
            Returns the cell text from a user-specified row index and column name. This has been created for RCP, so this may 
            or may not be compatible with other applications right now. If it is not, we can refactor this to make it compatible
            </summary>
            <param name="tblElemOrTblBodyElem">You table element or table body element that is found within the your Page class.
            Note that this works on almost all applications by using the Tbody element. We use the tbody element in most cases 
            because if we instead used the table element, then the thead element would interfere with the indexes. If 
            your application represents rows with tbodies instead of trs, then you are going to have to send the table 
            element and skip the thead index when passing the rowNum parameter.</param>
            <param name="theadElem">You table header (thead) element that is found within the your Page class. 
            i.e. OP.PendingAcceptanceTbl</param>
            <param name="rowIndex">The zero-based index of the row you want to extract the text from</param>   
            <param name="colName">The name of the column header for the column you want to extract the text from</param>
            <returns></returns>
            <param name="tagNameWhereColNameTextExists">(Optional). The HTML tag name where the colName exists. 
            Default = 'th'</param>
            <param name="tagNameWhereTargetedCellTextExists">(Optional). The HTML tag name where you are extracting the cell 
            text from. Default = 'td'</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.ReturnTrueColIndex(OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebElement,System.String,System.String)">
            <summary>
            Get the column index based on the column name that the tester passed. 
            For tables that have static rows (i.e. Tables that you cant add or delete data from, resulting
            in the amount of rows always being the same, the first column's cell text of each row always being
            the same etc.). For these types of tables, the first colum cell elements will have a tag name of TH,
            and not TD, because each row will be considered a header. This will affect the colIndex. colIndex
            should subtract 1 if this is the case because in this case, the second column cell text for each row 
            is considered the first data cell within the row, since the first column cell text is considered the 
            header
            </summary>
            <param name="theadElem">You table header (thead) element that is found within the your Page class. 
            i.e. OP.PendingAcceptanceTbl</param>
            <param name="tagNameWhereColNameTextExists">(Optional). The HTML tag name where the colName exists.</param>
            <param name="colName">The name of the column header for the column you want to extract the text from</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.ReturnTrueColIndex(OpenQA.Selenium.IWebElement,System.Int32)">
            <summary>
            Get the column index based on either the column name or based on the index that the tester passed. 
            For tables that have static rows (i.e. Tables that you cant add or delete data from, resulting
            in the amount of rows always being the same, the first column's cell text of each row always being
            the same etc.). For these types of tables, the first colum cell elements will have a tag name of TH,
            and not TD, because each row will be considered a header. This will affect the colIndex. colIndex
            should subtract 1 if this is the case because in this case, the second column cell text for each row 
            is considered the first data cell within the row, since the first column cell text is considered the 
            header
            </summary>
            <param name="row"></param>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.Grid_GetCellTextByRowNameAndColIndex(Browser, Browser, OpenQA.Selenium.IWebElement,OpenQA.Selenium.By,System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns the cell text from a user-specified row name and column name. This has been created for RCP, so this may or may not be compatible
            with other applications right now. If it is not, we can refactor this to make it compatible
            </summary>
            <param name="tblElem">You table element that is found within the your Page class. i.e. OP.PendingAcceptanceTbl</param>
            <param name="rowBy">Send any row in it's By type (Most likely just send the iwebelement that is a generic row 'tableId/tr' in the table. i.e. Bys.CBDObserverPage,PendingAcceptanceTblRowBody. We need any row so that we can wait for it to appear before proceeding with the test"/></param>
            <param name="firstColumnCellText">The name of the row. i.e. The exact text from cell inside the first column</param>
            <param name="tagNameWhereFirstColCellTextExists">The HTML tag name where the firstColumnCellText exists</param>
            <param name="colIndex">The zero-based index of the column you want to extract the text form.</param>
            <returns></returns>
            <param name="tagNameWhereTargetedCellTextExists">(Optional). The HTML tag name where you are extracting the cell 
            text from. Default = 'td'</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.Grid_GetCellTextByRowIndexAndColIndex(Browser, Browser, OpenQA.Selenium.IWebElement,OpenQA.Selenium.By,System.Int32,System.Int32,System.String)">
            <summary>
            Returns the cell text from a user-specified row number and column number. This has been created for RCP, so this 
            may or may not be compatible with other applications right now. If it is not, we can refactor this to make 
            it compatible
            </summary>
            <param name="tblElemOrTblBodyElem">You table element or table body element that is found within the your Page class.
            Note that this works on almost all applications by using the Tbody element. We use the tbody element in most cases 
            because if we instead used the table element, then the thead element would interfere with the indexes. If 
            your application represents rows with tbodies instead of trs, then you are going to have to send the table 
            element and skip the thead index when passing the rowNum parameter.</param>
            <param name="firstRowby">Send any row in it's By type (Most likely just send a generic row 'tableId/tr' in the table. i.e. Bys.CBDObserverPage,PendingAcceptanceTblRowBody. We need any row so that we can wait for it to appear before proceeding with the test"/></param>
            <param name="rowIndex">The zero-based index of the row you want to extract the text from</param>      
            <param name="colIndex">The zero-based index of the column you want to extract the text from.</param>
            <param name="tagNameWhereTargetedCellTextExists">(Optional). The HTML tag name where you are extracting the cell 
            text from. Default = 'td'</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.Grid_GetRowCount(Browser, OpenQA.Selenium.IWebElement)">
            <summary>
            Returns the row count of any grid
            </summary>
            <param name="tblBody">The table's tbody element</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.Grid_GetSelElemInsideRowByID(OpenQA.Selenium.IWebElement,OpenQA.Selenium.By,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the user-specified Select Element within a table by the ID of the Select Element
            </summary>
            <param name="tblElem">You table element that is found within the your Page class. i.e. OP.PendingAcceptanceTbl</param>
            <param name="firstRowBy">Send any row (Most likely just send the iwebelement that is a generic row 'tableId/tr' in the table, as it exists in your By type. i.e. Bys.CBDObserverPage,PendingAcceptanceTblRowBody). We need any row so that we can wait for it to appear before proceeding with the test"/></param>
            <param name="idOfSelElem">The exact text of the ID of the Select Element, however, if your select element is dynamically numbered per row, then only send the text before the number. For example, is the select tag has an ID of "Priority_0", only send "Priority"</param>
            <param name="firstColumnCellText">The name of the row. i.e. The exact text from cell inside the first column</param>
            <param name="tagNameWhereFirstColCellTextExists">The HTML tag name where the firstColumnCellText exists</param>
            <param name="additionalColCellText">(Optional) If the first column in your row does not have to be unique compared to other rows in your table, and you would want to specify an additional column value to find your row, you can do that here. Send the exact text of any other column.</param>
            <param name="tagNameWhereAddColCellTextExists">(Optional) The HTML tag name where the additionalColumnCellText exists</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.Grid_GetButtonOrLinkInsideRowByText(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,OpenQA.Selenium.By,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets the user-specified element within a table by the user-specified cell text of your user-specified row 
            </summary>
            <param name="tblElem">You table element that is found within the your Page class. i.e. OP.PendingAcceptanceTbl</param>
            <param name="firstRowBy">Send any row (Most likely just send the iwebelement that is a generic row 'tableId/tr' in the table, as it exists in your By type. i.e. Bys.CBDObserverPage,PendingAcceptanceTblRowBody). We need any row so that we can wait for it to appear before proceeding with the test"/></param>
            <param name="firstColumnCellText">The name of the row. i.e. The exact text from cell inside the first column</param>     
            <param name="tagNameWhereFirstColCellTextExists">The HTML tag name where the firstColumnCellText exists</param>
            <param name="btnText">The text of the button you want to click on</param>
            <param name="tagNameWhereButtonTextExists">The HTML tag name where the firstColumnCellText exists</param>
            <param name="additionalColCellText">(Optional) If the first column in your row does not have to be unique compared to other rows in your table, and you would want to specify an additional column value to find your row, you can do that here. Send the exact text of any other column.</param>
            <param name="tagNameWhereAddColCellTextExists">(Optional) The HTML tag name where the additionalColumnCellText exists</param>
            <param name="insideiFrame">(Optional) Send 'true' if the button or link is inside an iFrame</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.Grid_GetButtonOrLinkInsideRowByPartialClassName(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,OpenQA.Selenium.By,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the user-specified element within a table by specifying the row name as well as the tag names
            </summary>
            <param name="browser">The driver instance</param>
            <param name="tblElem">You table element that is found within the your Page class. i.e. OP.PendingAcceptanceTbl</param>
            <param name="firstRowBy">Send any row (Most likely just send the iwebelement that is a generic row 'tableId/tr' in the table, as it exists in your By type. i.e. Bys.CBDObserverPage,PendingAcceptanceTblRowBody). We need any row so that we can wait for it to appear before proceeding with the test"/></param>
            <param name="firstColumnCellText">The name of the row. i.e. The exact text from cell inside the first column</param>     
            <param name="tagNameWhereFirstColCellTextExists">The HTML tag name where the firstColumnCellText exists</param>
            <param name="tagNameWhereButtonTextExists">The HTML tag name where the button exists</param>
            <param name="buttonPartialClassAttributeText">The Class attribute value of the button element. This will be 
            used in a contains function, so a partial string of that Class attribute value can be used if needed</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.Grid_ToDatatable(System.Type,OpenQA.Selenium.IWebElement)">
            <summary>
            Returns a datatable from a grid. Alternative to <see cref="M:Browser.Core.Framework.BrowserExtensions.GetDataFromIgGrid(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,Browser.Core.Framework.DataColumnDefinition[])"/>
            </summary>
            <param name="gridColumnsClass">A class must be created that contains the columns names of the grid of type string. For an example, see the 
            SamplePage.NameAgeTableColumns. Once this class is crated, then pass the text: "typeof(NameAgeTableColumns)"</param>
            <param name="gridBodyElem">The grid body element</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.Grid_GetRowByRowName(Browser, OpenQA.Selenium.IWebElement,OpenQA.Selenium.By,System.String,System.String)">
            <summary>
            Returns the row that contains the user-specified cell. NOTE: If your table contains rows that are not unique (as per the 
            firstColumnCellText, then this will just return the first instance of those rows). 
            </summary>
            <param name="tblElem">You table element that is found within the your Page class. i.e. OP.PendingAcceptanceTbl</param>
            <param name="firstRowby">Send any row (Most likely just send the iwebelement that is a generic row 'tableId/tr' in the table, as it exists in your By type. i.e. Bys.CBDObserverPage,PendingAcceptanceTblRowBody). We need any row so that we can wait for it to appear before proceeding with the test"/></param>
            <param name="firstColumnCellText">The name of the row. i.e. The exact text from cell inside the first column</param>
            <param name="tagNameWhereFirstColCellTextExists">The HTML tag name where the firstColumnCellText exists</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.Grid_GetCellsByCellText(OpenQA.Selenium.IWebElement,OpenQA.Selenium.By,System.String,System.String)">
            <summary>
            Returns the cells that contains the user-specified text
            </summary>
            <param name="tblElem">You table element that is found within the your Page class. i.e. OP.PendingAcceptanceTbl</param>
            <param name="firstRowby">Send any row (Most likely just send the iwebelement that is a generic row 'tableId/tr' in the table, as it exists in your By type. i.e. Bys.CBDObserverPage,PendingAcceptanceTblRowBody). We need any row so that we can wait for it to appear before proceeding with the test"/></param>
            <param name="cellText">The name of the cell. i.e. The exact text from cell you want to get returned</param>
            <param name="tagNameWhereFirstColCellTextExists">The HTML tag name where the cellText exists</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.Grid_GetRowByRowNameAndAdditionalCellName(Browser, OpenQA.Selenium.IWebElement,OpenQA.Selenium.By,System.String,System.String,System.String,System.String)">
            <summary>
            Returns the row that contains the user-specified cell text from 2 cells. This is useful for tables that can contain 
            non-unique rows (First column cell text can be the same)
            </summary>
            <param name="tblElem">You table element that is found within the your Page class. i.e. OP.PendingAcceptanceTbl</param>
            <param name="firstRowby">Send any row (Most likely just send the iwebelement that is a generic row 'tableId/tr' in the table, as it exists in your By type. i.e. Bys.CBDObserverPage,PendingAcceptanceTblRowBody). We need any row so that we can wait for it to appear before proceeding with the test"/></param>
            <param name="firstColumnCellText">The name of the row. i.e. The exact text from cell inside the first column</param>
            <param name="tagNameWhereFirstColCellTextExists">The HTML tag name where the firstColumnCellText exists</param>
            <param name="additionalColCellText">If the first column in your row does not have to be unique compared to other rows in your table, and you would want to specify an additional column value to find your row, you can do that here. Send the exact text of any other column.</param>
            <param name="tagNameWhereAddColCellTextExists">The HTML tag name where the additionalColumnCellText exists</param> 
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.Grid_GetRowsByRowName(OpenQA.Selenium.IWebElement,OpenQA.Selenium.By,System.String,System.String)">
            <summary>
            Returns the row that contains the user-specified cell
            </summary>
            <param name="tblElem">You table element that is found within the your Page class. i.e. OP.PendingAcceptanceTbl</param>
            <param name="firstRowby">Send any row (Most likely just send the iwebelement that is a generic row 'tableId/tr' in the table, as it exists in your By type. i.e. Bys.CBDObserverPage,PendingAcceptanceTblRowBody). We need any row so that we can wait for it to appear before proceeding with the test"/></param>
            <param name="firstColumnCellText">The name of the row. i.e. The exact text from cell inside the first column</param>
            <param name="tagNameWhereCellTextExists">The HTML tag name where the firstColumnCellText exists</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.Grid_ContainsRecord_WithAdditionalCellText(OpenQA.Selenium.IWebElement,OpenQA.Selenium.By,System.String,System.String,System.String,System.String)">
            <summary>
            Returns true or false depending on if we find a row that contains the user-specified cell text from 2 cells. This is useful for tables
            that can contain non-unique rows (First column cell text can be the same)
            </summary>
            <param name="tblElem">You table element that is found within the your Page class. i.e. OP.PendingAcceptanceTbl</param>
            <param name="firstRowby">Send any row (Most likely just send the iwebelement that is a generic row 'tableId/tr' in the table, as it exists in your By type. i.e. Bys.CBDObserverPage,PendingAcceptanceTblRowBody). We need any row so that we can wait for it to appear before proceeding with the test"/></param>
            <param name="firstColumnCellText">The name of the row. i.e. The exact text from cell inside the first column</param>
            <param name="tagNameWhereFirstColCellTextExists">The HTML tag name where the firstColumnCellText exists</param>
            <param name="additionalColCellText">If the first column in your row does not have to be unique compared to other rows in your table, and you would want to specify an additional column value to find your row, you can do that here. Send the exact text of any other column.</param>
            <param name="tagNameWhereAddColCellTextExists">The HTML tag name where the additionalColumnCellText exists</param> 
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.Grid_ContainsRecord(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,OpenQA.Selenium.By,System.Int32,System.String,System.String,OpenQA.Selenium.By,OpenQA.Selenium.By)">
            <summary>
            Returns true if the text is found under the user-specified column of the table
            </summary>
            <param name="browser">The driver instance</param>
            <param name="tableElem">The table element</param>
            <param name="tableElemBodyBy">The tbody element within the table as it exists in it's By type. We need this element to wait for the data to appear, as some tables load the body AFTER the table itself gets loaded</param>
            <param name="colNumber">Send the column number index (starting with zero) where you are checking to make sure the text exists</param>
            <param name="expectedText">The text you expect to be under the specified column of your table</param>
            <param name="tagNameThatTextExistsWithin">Inspect your table's cell to determine what type of element the text exists within. Then send the tag name to this parameter</param>
            <param name="FirstBtn">(Optional) If your table contains first and next pagination buttons, then pass the First button element first, and then the Next button element. For example, pass "Bys.CBDLearnerPage.TableFirstBtn"</param>
            <param name="NextBtn">(Optional) If your table contains first and next pagination buttons, then pass the First button element first, and then the Next button element. For example, pass "Bys.CBDLearnerPage.TableFirstBtn"</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.Grid_CellTextFound(Browser, OpenQA.Selenium.IWebElement,System.Int32,System.String,System.String)">
            <summary>
            If any rows in the grid contain the user-specified text, return true
            </summary>
            <param name="tableElem"></param>
            <param name="colNumber">Send the column number index (starting with zero) where you are checking to make sure the text exists</param>
            <param name="tagNameThatTextExistsWithin">Inspect your table's cell to determine what type of element the text exists within. Then send the tag name to this parameter</param>
            <param name="expectedText"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.RdoBtn_GetRdoBtnByTextContains(OpenQA.Selenium.IWebDriver,System.String)">
            <summary>
            Gets the radio button element based on it's label containing text. Use this instead of 
            <see cref="M:Browser.Core.Framework.ElemGet.RdoBtn_GetRdoBtnByText(OpenQA.Selenium.IWebDriver,System.String)"/> if your applications radio button has leading or trailing
            whitespaces, end lines, etc.
            </summary>
            <param name="browser">The driver instance</param>
            <param name="textOfRadioBtn">The exact text of one of the radio buttons inside</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.RdoBtn_GetRdoBtnByText(OpenQA.Selenium.IWebDriver,System.String)">
            <summary>
            Gets the radio button element based on it's label text. Currently developed for RCP, ABAM and the Test Portal. If it is not 
            compatible with your application, then add code below to condition it so it is
            </summary>
            <param name="browser">The driver instance</param>
            <param name="textOfRadioBtn">The exact text of one of the radio buttons inside</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.RdoBtn_GetRdoBtnByText(OpenQA.Selenium.IWebDriver,System.String,OpenQA.Selenium.IWebElement)">
            <summary>
            Gets the radio button element within a specified parent element based on it's label text. Currently developed for RCP, ABAM, UAMS,
            and the Test Portal. If it is not compatible with your application, then add code below to condition it so it is
            </summary>
            <param name="browser">The driver instance</param>
            <param name="textOfRadioBtn">The exact text of one of the radio buttons inside</param>
            <param name="ParentElem">The parent element to find your check box in</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemGet.GeneralElemVisibleOnScreen(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement)">
            <summary>
            This method checks whether an element is currently visible to the eye on the screen. Selenium's Display property did not accomplish this,
            so I created this method.
            </summary>
            <param name="browser">The driver instance</param>
            <param name="elem">The element to verify</param>
        </member>
        <member name="T:Browser.Core.Framework.ElemSet">
            <summary>
            A utility class for manipulating elements
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.SelElem_Single_SelectRandomItem(OpenQA.Selenium.Support.UI.SelectElement)">
            <summary>
            Selects a random item in a single select dropdown. It will not select the already selected item.
            </summary>
            <param name="elem">The SelectElement that contains the items</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.SelElem_SelectItemContainingText(OpenQA.Selenium.Support.UI.SelectElement,System.String)">
            <summary>
            Selects the first indexed item in the dropdown that contains the user-specified text
            </summary>
            <param name="elem">The element</param>
            <param name="text">The text to search for</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.SelElem_Multi_SelectRandomItems(OpenQA.Selenium.Support.UI.SelectElement,System.Int32)">
            <summary>
            Selects a user-specified number of random items in a multi-select SelectElement. If you need to select a lot of items in a dropdown that
            contains a large list, then this method might take a while. In that case, you can Use DropdownCustomClickRandomItems with IWebElement instead.
            </summary>
            <param name="elem">The IWebElement that contains the items</param>
            <param name="numberOfItemsToSelect"></param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.Grid_ClickButtonOrLinkWithoutTextByPartialClassName(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,OpenQA.Selenium.By,System.String,System.String,System.String,System.String)">
            <summary>
            Clicks the user-specified element within a table by specifying the row name as well as the tag names
            </summary>
            <param name="browser">The driver instance</param>
            <param name="tblElem">You table element that is found within the your Page class. i.e. OP.PendingAcceptanceTbl</param>
            <param name="firstRowBy">Send any row (Most likely just send the iwebelement that is a generic row 'tableId/tr' in the table, as it exists in your By type. i.e. Bys.CBDObserverPage,PendingAcceptanceTblRowBody). We need any row so that we can wait for it to appear before proceeding with the test"/></param>
            <param name="firstColumnCellText">The name of the row. i.e. The exact text from cell inside the first column</param>     
            <param name="tagNameWhereFirstColCellTextExists">The HTML tag name where the firstColumnCellText exists</param>
            <param name="tagNameWhereButtonTextExists">The HTML tag name where the button exists</param>
            <param name="buttonPartialClassAttributeText">The Class attribute value of the button element. This will be 
            used in a contains function, so a partial string of that Class attribute value can be used if needed</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.DropdownCommunity_DeselectItemByName(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebElement,System.String)">
            <summary>
            Clicks on the dropdown button to expand it, clicks on the selected item to deselect it (if it is not already deselected), 
            then closes the dropdown.
            </summary>
            <param name="browser">The driver instance</param>
            <param name="btnElem">The button you are selecting the item from. It must be of type IWebElement, not SelectElement</param>
            <param name="drpDpParentElem">The parent element that contains the UL tag element which contains your drop down items</param>
            <param name="name">The name of the item you want to click on</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.DropdownCommunity_Click(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement)">
            <summary>
            Chrome browser is failing in tests when simply using multiselectdropdown.click(). For some reason in this browser, whenever a dropdown
            gets expanded, a new element is created in the HTML with a classname of dropdown-backdrop. This new element blocks Selenium from all of the
            controls within the form, so if the user tries to do a multiselectdropdown.click(), selenium says it failed to click on that dropdown, and
            instead says the dropdown-backdrop would get the click. So the below method takes that into account and works to open and close the control
            </summary>
            <param name="elem">The button element of the multi-select dropdown</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.DropdownCommunity_SelectItemByName(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebElement,System.String)">
            <summary>
            Clicks on the dropdown button to expand it, selects an item by name, then closes the dropdown. This is an extension to 
            DropdownCustomSelectListItemByIndex. 
            NOTE: If the item is already selected, it will stay selected because the method conditions it so the item will be clicked twice in this case.
            </summary>
            <param name="browser">The driver instance</param>
            <param name="btnElem">The button you are selecting the item from. It must be of type IWebElement, not SelectElement</param>
            <param name="drpDpParentElem">The parent element that contains the UL tag element which contains your drop down items</param>
            <param name="name">The name of the item you want to click on</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.DropdownSingle_Fireball_SelectByText(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,System.String)">
            <summary>
            
            </summary>
            <param name="Browser"></param>
            <param name="btnElem"></param>
            <param name="drpDpParentElem"></param>
            <param name="itemName"></param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.DropdownSingle_Fireball_SelectByIndex(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,System.Int32)">
            <summary>
            
            </summary>
            <param name="Browser"></param>
            <param name="btnElem"></param>
            <param name="drpDpParentElem"></param>
            <param name="itemName"></param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.DropdownSingle_Fireball_DeselectByText(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,System.String)">
            <summary>
            
            </summary>
            <param name="Browser"></param>
            <param name="btnElem"></param>
            <param name="drpDpParentElem"></param>
            <param name="itemName"></param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.DropdownSingle_Fireball_DeselectByIndex(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,System.Int32)">
            <summary>
            
            </summary>
            <param name="Browser"></param>
            <param name="btnElem"></param>
            <param name="drpDpParentElem"></param>
            <param name="itemName"></param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.DropdownMulti_Fireball_SelectByText(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,System.String)">
            <summary>
            
            </summary>
            <param name="Browser"></param>
            <param name="btnElem"></param>
            <param name="drpDpParentElem"></param>
            <param name="itemName"></param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.DropdownMulti_Fireball_SelectByIndex(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,System.Int32)">
            <summary>
            
            </summary>
            <param name="Browser"></param>
            <param name="btnElem"></param>
            <param name="drpDpParentElem"></param>
            <param name="itemName"></param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.DropdownMulti_Fireball_DeselectByText(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,System.String)">
            <summary>
            
            </summary>
            <param name="browser"></param>
            <param name="btnElem"></param>
            <param name="drpDpParentElem"></param>
            <param name="itemName"></param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.DropdownMulti_Fireball_DeselectByIndex(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,System.Int32)">
            <summary>
            
            </summary>
            <param name="browser"></param>
            <param name="btnElem"></param>
            <param name="drpDpParentElem"></param>
            <param name="itemName"></param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.TextBox_EnterText(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,System.Boolean,System.String)">
            <summary>
            This should be used to enter text into a text box for all text inside bootstrap forms. The javascript is needed to run so that the entered values
            do not get lost after the text is written into the text boxes. This issue occurs in IE all the time, and in Firefox less frequently. For background
            on the subject, see (http://stackoverflow.com/questions/9505588/selenium-webdriver-is-clearing-out-fields-after-sendkeys-had-previously-populate)
            If you want to see this issue, use SendKeys (without this method) inside a bootstrap form, then click Save. Notice
            that you receive an AJAX error, and the Web App log (if DEV provides one for your Web App) will show that there were no values in the text boxes when
            Save was clicked.
            </summary>
            <param browser="The driver instance"></param>
            <param elem="The element to enter text into"></param>
            <param clearText="Whether you want to clear the text before you enter text or not"></param>
            <param text="The exact string you want to enter"></param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.Grid_ExpandOrCollapseButton(OpenQA.Selenium.IWebElement,System.String,System.String)">
            <summary>
            Expands or collapses an entire table, or row within a table. Note that this has been created for RCP CBD Learner and Prog Admin
            You may or may not have to add code to make it work with your individual application
            </summary>
            <param name="tblElem">The table element that contains the expansion/collapse icon</param>
            <param name="groupdItemToExpandOrCollapse">The exact text of the row name with the the expansion/collapse icon</param>
            <param name="expandOrCollapse">Either "expand" or "collapse"</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.Grid_ClickCellByCellText(OpenQA.Selenium.IWebElement,System.String)">
            <summary>
            Clicks any cell inside of a grid by the cell text of that cell
            </summary>
            <param gridElem="The driver instance"></param>
            <param cellText="The exact cell text inside the cell"></param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.Grid_ClickCellByColIndex(Browser, Browser, OpenQA.Selenium.IWebElement,System.Int32,System.String)">
            <summary>
            Clicks any cell inside of a grid by the zero-based index of the column
            </summary>
            <param rowElem="The row element"></param>
            <param colIndex="The column index"></param>
            <param name="tagNameWhereElemToClickexists">(Optional) By default, this method will click on the TD tag (cell). If you want to click on an element within that TD tag cell, then send the tag name of that element within this parameter</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.Grid_HoverOverCellByCellText(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,System.String)">
            <summary>
            Hovers over any cell inside of a grid by the cell text of that cell
            </summary>
            <param gridElem="The driver instance"></param>
            <param cellText="The exact cell text inside the cell"></param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.Grid_ClickMenuItemInsideDropdown(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,System.String)">
            <summary>
            This will click on any button within a row on a table and then click the menu item that appears from that button
            </summary>
            <param name="Browser">The driver instance</param>
            <param name="parentElem">The parent element that contains all of the menu items within the dropdown. </param>
            <param name="menuItemText">The exact text from the menu item after the button is clicked</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.Grid_ClickButtonOrLinkWithinRow(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,OpenQA.Selenium.By,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            This will click on any element within a row on a table by that element's cell text. It will return that element
            </summary>
            <param name="Browser">The driver instance</param>
            <param name="tblElem">You table element that is found within the your Page class. i.e. OP.PendingAcceptanceTbl</param>
            <param name="rowElemBy">Any row on your table, as it exists in your By type. We need to use this to wait for a row before we proceed with the test. i.e. Bys.CBDObserverPage,PendingAcceptanceTblBodyRow"/></param>
            <param name="firstColumnCellText">The name of the row. i.e. The exact text from cell inside the first column</param>
            <param name="tagNameWhereFirstColCellTextExists">The HTML tag name where the firstColumnCellText exists</param>
            <param name="btnText">The exact text from the button you want to click</param>
            <param name="tagNameWhereButtonExists">The HTML tag name where the firstColumnCellText exists</param>
            <param name="additionalColCellText">(Optional) If the first column in your row does not have to be unique compared to other rows in your table, and you would want to specify an additional column value to find your row, you can do that here. Send the exact text of any other column.</param>
            <param name="tagNameWhereAddColCellTextExists">(Optional) The HTML tag name where the additionalColumnCellText exists</param>
            <param name="insideiFrame">(Optional) Send 'true' if the button or link is inside an iFrame</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.Grid_HoverButtonOrLinkWithinRow(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,OpenQA.Selenium.By,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            This will hover over any element within a row on a table
            </summary>
            <param name="Browser">The driver instance</param>
            <param name="tblElem">You table element that is found within the your Page class. i.e. OP.PendingAcceptanceTbl</param>
            <param name="rowElemBy">Any row on your table, as it exists in your By type. We need to use this to wait for a row before we proceed with the test. i.e. Bys.CBDObserverPage,PendingAcceptanceTblBodyRow"/></param>
            <param name="firstColumnCellText">The name of the row. i.e. The exact text from cell inside the first column</param>
            <param name="tagNameWhereFirstColCellTextExists">The HTML tag name where the firstColumnCellText exists</param>
            <param name="btnText">The exact text from the button you want to click</param>
            <param name="tagNameWhereButtonExists">The HTML tag name where the firstColumnCellText exists</param>
            <param name="additionalColCellText">(Optional) If the first column in your row does not have to be unique compared to other rows in your table, and you would want to specify an additional column value to find your row, you can do that here. Send the exact text of any other column.</param>
            <param name="tagNameWhereAddColCellTextExists">(Optional) The HTML tag name where the additionalColumnCellText exists</param>
            <param name="insideiFrame">(Optional) Send 'true' if the button or link is inside an iFrame</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.Grid_SelectItemWithinSelElem(Browser, Browser, OpenQA.Selenium.IWebElement,OpenQA.Selenium.By,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            This will select an item inside of a select element within a row of a grid
            </summary>
            <param name="tblElem">You table element that is found within the your Page class. i.e. OP.PendingAcceptanceTbl</param>
            <param name="firstRowby">Send any row (Most likely just send the iwebelement that is a generic row 'tableId/tr' in the table, as it exists in your By type. i.e. Bys.CBDObserverPage,PendingAcceptanceTblRowBody). We need any row so that we can wait for it to appear before proceeding with the test"/></param>
            <param name="firstColumnCellText">The name of the row. i.e. The exact text from cell inside the first column</param>
            <param name="tagNameWhereFirstColCellTextExists">The HTML tag name where the firstColumnCellText exists</param>
            <param name="idOfSelElem">The exact text of the ID of the Select Element, however, if your select element is dynamically numbered per row, then only send the text before the number. For example, is the select tag has an ID of "Priority_0", only send "Priority"</param>
            <param name="itemToChoose">The exact text of the item you want to choose</param>
            <param name="additionalColCellText">(Optional) If the first column in your row does not have to be unique compared to other rows in your table, and you would want to specify an additional column value to find your row, you can do that here. Send the exact text of any other column.</param>
            <param name="tagNameWhereAddColCellTextExists">(Optional) The HTML tag name where the additionalColumnCellText exists</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.Grid_ClickButtonOrLinkWithoutTextWithinRow(Browser, Browser, OpenQA.Selenium.IWebElement,System.String,System.Int32)">
            <summary>
            Clicks on an element within a user-specified row, such as a check box, or an X icon, or a + icon, or a Pencil Icon
            </summary>
            <param name="row">The row that contains the element you want to click on. To get the row, <see cref="!:ElemGet.Grid_GetRowByRowName(Browser, IWebElement, By, string)"/></param>
            <param name="tagNameOfElemToclick"></param>
            <param name="indexOfElemToClick">(Optional). If your row has multiple elements with the same tag name, you can specify the index at which you tag name you want to click. Default is 0 for the first instance</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.RdoBtn_ClickByText(OpenQA.Selenium.IWebDriver,System.String)">
            <summary>
            Clicks a radio button of your choice. 
            </summary>
            <param name="browser">The driver instance</param>
            <param name="textOfRadioBtn">The exact text as it appears in the HTML of the radio button to click</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.RdoBtn_ClickByTextContains(OpenQA.Selenium.IWebDriver,System.String)">
            <summary>
            Clicks a radio button of your choice that contains the text you specified. Use this instead of
            <see cref="M:Browser.Core.Framework.ElemSet.RdoBtn_ClickByText(OpenQA.Selenium.IWebDriver,System.String)"/> if your applications radio buttons have leading
            or trailing white space, or end lines, etc.
            </summary>
            <param name="browser">The driver instance</param>
            <param name="textOfRadioBtn">The exact text as it appears in the HTML of the radio button to click</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.RdoBtn_ClickByText(OpenQA.Selenium.IWebDriver,System.String,OpenQA.Selenium.IWebElement)">
            <summary>
            Clicks a radio button of your choice contained within a specified parent element
            </summary>
            <param name="browser">The driver instance</param>
            <param name="textOfRadioBtn">The exact text as it appears in the HTML of the radio button to click</param>
            <param name="ParentElem">The parent element to find your check box in</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.RdoBtn_ClickMultipleByText(OpenQA.Selenium.IWebDriver,System.String[])">
            <summary>
            Selects multiple radio buttons of your choice
            </summary>
            <param name="browser">The driver instance</param>
            <param name="textOfRadioBtns">The exact text as it appears in the HTML of the radio buttons to click</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.RdoBtn_ClickRandom(OpenQA.Selenium.IWebDriver,System.String)">
            <summary>
            Clicks on a random radio button within a "table" tag
            </summary>
            <param name="browser">The driver instance</param>
            <param name="textOfRadioBtn">The exact text of one of the radio buttons inside</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.ChkBx_ClickByText(OpenQA.Selenium.IWebDriver,System.String,System.Int32)">
            <summary>
            Clicks a check box of your choice. 
            </summary>
            <param name="browser">The driver instance</param>
            <param name="textOfCheckBox">The exact text as it appears in the HTML of the check box to click</param>
            <param name="indexOfCheckBoxWithSameText">If there are multiple check boxes on the same page with the same text, you can specify
            at which index you want to click</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.ChkBx_ClickByText(OpenQA.Selenium.IWebDriver,System.String,OpenQA.Selenium.IWebElement,System.Int32)">
            <summary>
            Clicks a check box of your choice contained within a specified parent element
            </summary>
            <param name="browser">The driver instance</param>
            <param name="textOfCheckBox">The exact text as it appears in the HTML of the check box to click</param>
            <param name="ParentElem">The parent element to find your check box in</param>
            <param name="indexOfCheckBoxWithSameText">If there are multiple check boxes on the same page with the same text, you can specify
            at which index you want to click</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.ChkBx_ChooseRandom(OpenQA.Selenium.IWebDriver,System.String)">
            <summary>
            Clicks on a random check box that is contained within a "div" tag with a class attribute value of "form-group"
            </summary>
            <param name="browser">The driver instance</param>
            <param name="textOfChkBx">The exact text of one of the check box that you want to click</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.ClickAfterScroll(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebElement)">
            <summary>
            Scrolls to your element, then clicks it. Use this when your click fails on small laptops or screens. The
            exception thrown in most of these cases is "Element is not clickable at point..."
            </summary>
            <param name="browser">The driver instance</param>
            <param name="elem">The element to scroll to then click on</param>
            <param name="divElem">If your element is inside a popup window, or inside a frame (not inside the main window), then you must send the scroll bar element of the frame/popup window. This is usually the a Div tag. If the element is on the main window, then just dont pass this parameter</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.ScrollToElementWithinFrame(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,OpenQA.Selenium.IWebElement,System.String)">
            <summary>
            Scrolls horizontally or vertically to a specified element within a frame that contains a scroll bar
            </summary>
            <param name="browser">The driver</param>
            <param name="divElem">The div element that contains the scroll bar must be passed here</param>
            <param name="elemToScrollTo">The element the tester wants to scroll to</param>
            <param name="HorizontalOrVertical">'Horizontal' or 'Vertical'</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.ScrollToWithinFrame(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,System.Int32,System.String)">
            <summary>
            Scrolls horizontally or vertically to a specified element within a frame that contains a scroll bar
            <param name="browser">The driver</param>
            <param name="divElem">The div element that contains the scroll bar must be passed here</param>
            <param name="xOrYCoordinate">The X or the Y coordinate</param>
            <param name="HorizontalOrVertical">'Horizontal' or 'Vertical'</param>
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.ScrollToElement(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,System.Boolean)">
            <summary>
            Scrolls vertically to a specified element within the active window. This only scrolls on the main window scroll bar, not any embedded
            scroll bars. 
            </summary>
            <param name="browser">The driver</param>
            <param name="divElem">The element to scroll to</param>
            <param name="insideiFrame">(Optional) send 'true' if the element you want to scroll to is inside of an iframe</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.ScrollToSelectElement(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.Support.UI.SelectElement)">
            <summary>
            Scrolls vertically to a specified Select element within the active window. This only scrolls on the window scroll bar, not any scroll bars embedded
            scroll bars
            <param name="browser">The driver</param>
            <param name="divElem">The select element to scroll to</param>
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.SendKeysAfterScroll(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,System.String,OpenQA.Selenium.IWebElement)">
            <summary>
            Scrolls to your element, then sends the string provided in the parameter. Use this when your click fails on small laptops or screens. The
            exception thrown in most of these cases is "Element is not clickable at point..."
            </summary>
            <param name="browser">The driver instance</param>
            <param name="elem">The element to scroll to then click on</param>
            <param name="keys">The String to be sent to the textbox</param>
            <param name="divElem">If your element is inside a popup window, or inside a frame (not inside the main window), then you must send the scroll bar element of the frame/popup window. This is usually the a Div tag. If the element is on the main window, then just dont pass this parameter</param>
        </member>
        <member name="M:Browser.Core.Framework.ElemSet.DatePicker_ChooseDate(OpenQA.Selenium.IWebElement,System.String,System.String,System.String)">
            <summary>
            Expands the date picker, clicks the upper middle button until the Year frame appears. If the year is not shown 
            on the current frame/button (See RCP Create Upcoming Agenda form), it will click the forward or back button m
            so the year shows, then it chooses the year, then month, then day of month, then closes the control
            </summary>
            <param name="dateElemTxt">The text box element of the date control. Most likely, the Xpath will be something like the following: //input[@type='text' and @name='Date']</param>
            <param name="yr">The 2 digit year. ie. "17"</param>
            <param name="monthName">The full month name. ie. "January"</param>
            <param name="dayOfMonth">The day of the month. ie. "24"</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.Excel_GetData_ByRowAndColumn(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method returns the data/value in the cell by given (RowIndex,ColumnIndex) 
            </summary>
            <param name="excelFileName">ExcelFile Name</param>
            <param name="excelSheetName"> Worksheet Name</param>
            <param name="row"></param> row number
            <param name="column"></param> column index
            <returns>data value in string format</returns>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.Excel_GetWorksheet(System.String,System.String)">
            <summary>
            this method returns excel worksheet object if the given worksheet is found in given excel workbook
            </summary>
            <param name="fullPathWithFileName">The full file location path string and the filename</param>
            <param name="excelSheetName">Worksheet Name</param>
            <returns>excelWorksheet object</returns> if not found throw exception
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.Excel_GetWorksheetNames(System.Collections.Generic.List{System.String})">
            <summary>
            Excel has a 31 character limit for worksheet names. This will shorten the names to the limit while also handling any 
            naming collisions which occur when there are multipe instances of the same name
            </summary>
            <param name="worksheetNames"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.Excel_GetColumnIndex(System.String,System.String,System.String)">
            <summary>
            This method returns the ColumnIndex of the Required ColumName/ColumTitle from excelsheet;
            Columns might not be in the same order every time; Some columns might be added up /removed. 
            So the Order of the index would not be static. Hence, This method is required; It identifies the index by 
            Searching and Comparing all the Column Titles by the required ; And returns Column Index.
            </summary>
            <param name="excelFileName"> ExcelFile Name</param>
            <param name="excelSheetName"> Worksheet Name</param>
            <param name="columnName"> ColumName/ColumTitle </param>
            <returns> ColumnIndex </returns>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.Excel_GetTotalRowCount(System.String,System.String)">
            <summary>
            This method returns count of total number of rows/ records in the excel sheet
            </summary>
            <param name="excelFileName">ExcelFile Name</param>
            <param name="excelSheetName"> Worksheet Name</param>
            <returns>totalRowCount = total records</returns>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.Notepad_StoreResults(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            Writes ustom text to a text file. Saves the file to \TestOutput\DataFiles\*AppName*\*FileName*
            </summary>
            <param name="Browser"></param>
            <param name="fileNamePrefix">You can specify a prefix to add onto the file name</param>
            <param name="results"></param>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.Excel_StoreResults(OpenQA.Selenium.IWebDriver,System.String,Browser.Core.Framework.MyWorkBook)">
            <summary>
            Writes two list of strings (per worksheet) that have a parent>child relationship. This will print the lists in such a way 
            that the first list represents the parent items, and then second list represents the child items. 1 parent will be 
            printed on the first column, and the second column will group each children item in their respective parent. 
            Saves the file to \TestOutput\DataFiles\*AppName*\*FileName*
            </summary>
            <param name="Browser"></param>
            <param name="fileNamePrefix"></param>
            <param name="myWorkBook"><see cref="T:Browser.Core.Framework.MyWorkBook"/></param>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.Excel_StoreResults(OpenQA.Selenium.IWebDriver,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.Collections.Generic.List{System.ValueTuple{System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String}}})">
            <summary>
            Writes two list of strings (per worksheet) to an excel file for comparison. Saves the file to 
            \TestOutput\DataFiles\*AppName*\*FileName*
            </summary>
            <param name="Browser"></param>
            <param name="fileNamePrefix">You can specify a prefix to add onto the file name</param>
            <param name="worksheetNames">The worksheet titles</param>
            <param name="firstListName">The name of the first list. This will be placed in the first column of the excel file</param>
            <param name="secondListName">The name of the second list. This will be placed in the third column of the excel file</param>
            <param name="listsPerWorksheet">The lists being printed to each worksheet</param>
            <param name="parentChild">true if you want the lists to be printed as a parent>child relationship. See Description for more info.</param>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.Excel_StoreResults(OpenQA.Selenium.IWebDriver,System.String,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            Writes 1 list of strings (per worksheet) to an excel file. Saves the file to 
            \TestOutput\DataFiles\*AppName*\*FileName*
            </summary>
            <param name="Browser"></param>
            <param name="fileNamePrefix">You can specify a prefix to add onto the file name</param>
            <param name="worksheetNames">The worksheet titles</param>
            <param name="listName">The name of the lists</param>
            <param name="listOfStringsPerWorksheet">The lists being printed to each worksheet</param>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.CSV_StoreResults(OpenQA.Selenium.IWebDriver,NUnit.Framework.TestContext.TestAdapter,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Writes two list of strings to a csv file for comparison 
            </summary>
            <param name="Browser"></param>
            <param name="test">The test instance. <see cref="P:NUnit.Framework.TestContext.CurrentContext"/></param>
            <param name="fileNamePrefix">You can specify a prefix to add onto the file name</param>
            <param name="firstListName">The name of the first list. This will be placed in the first column of the csv file</param>
            <param name="list1">The first list of strings to print</param>
            <param name="secondListName">The name of the second list. This will be placed in the third column of the csv file</param>
            <param name="list2">The second list of strings to print</param>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.CSV_StoreResults(OpenQA.Selenium.IWebDriver,NUnit.Framework.TestContext.TestAdapter,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Writes two list of strings to a csv file for comparison 
            </summary>
            <param name="Browser"></param>
            <param name="test">The test instance. <see cref="P:NUnit.Framework.TestContext.CurrentContext"/></param>
            <param name="fileNamePrefix">You can specify a prefix to add onto the file name</param>
            <param name="firstListName">The name of the first list. This will be placed in the first column of the csv file</param>
            <param name="list1">The first list of strings to print</param>
            <param name="secondListName">The name of the second list. This will be placed in the third column of the csv file</param>
            <param name="list2">The second list of strings to print</param>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.GetSolutionDirectory">
            <summary>
            Returns the solution's directory. For example, C:\repos\JIRA\lms-webautomation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.GetProjectDirectory">
            <summary>
            Returns the project's directory. For example, C:\repos\JIRA\lms-webautomation\lms.uitest
            </summary>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.GetFullPath_DataFiles">
            <summary>
            Returns the directory of where our data files are located. For example,
            C:\repos\jira\LMS.WebAutomation\TestOutput\DataFiles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.GetFullPathWithFileName_DataFiles(OpenQA.Selenium.IWebDriver,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="Browser"></param>
            <param name="fileNamePrefix">You can specify a prefix to add onto the file name</param>
            <param name="fileExtension">(Optional). Default = .xlsx</param>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.GetFullPathWithFileName_Screenshots_FailedTest(NUnit.Framework.TestContext.TestAdapter,System.String)">
            <summary>
            Builds the full directory with file name appended of screenshots. If screenshot file name exists, it appends
            a number onto the end of the filename
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.GetFullPathWithFileName_Screenshots_DuringTest(OpenQA.Selenium.IWebDriver,NUnit.Framework.TestContext.TestAdapter,System.String)">
            <summary>
            
            </summary>
            <param name="Browser"></param>
            <param name="test"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.VerifyBuildDataFileDirectory(OpenQA.Selenium.IWebDriver)">
            <summary>
            If we are configuring a new build on new build servers, and we want to check if the new servers are building
            the directory in the place we want it to (i.e. lms-webautomation\TestOutput\LMS_Production\2019-11-26), 
            then we can call this method, which will output a custom error message that shows where the directory
            is built when executing on the build
            </summary>
            <param name="Browser"></param>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.DataFiles_CreateFileName(OpenQA.Selenium.IWebDriver,NUnit.Framework.TestContext.TestAdapter,System.String,System.String)">
            <summary>
            Builds a custom file name including the user-specified extension
            </summary>
            <param name="Browser"></param>
            <param name="test"></param>
            <param name="fileNamePrefix"></param>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.DataFiles_CreateFullPathWithFileName(System.String,System.String,System.String,System.String)">
            <summary>
            Builds a full directory with custom file name
            </summary>
            <param name="directory"></param>
            <param name="applicationName"></param>
            <param name="testName"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.IsFileLocked(System.IO.FileInfo)">
            <summary>
            Tries to lock the given file.  If locking fails returns true; otherwise, returns false.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.CreateFile(System.String,System.String)">
            <summary>
            Creates a file with a tester-specified file name inside a tester-specified directory. 
            Creates the directory if it doesnt exist. NOTE: Not compatible when executing tests on the Grid, as this only 
            manipulates your local file system
            </summary>
            <param name="folderLocation"></param>
            <param name="fileNameAndExtension"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.DeleteFile(System.String)">
            <summary>
            Deletes a file. NOTE: Not compatible when executing tests on the Grid, as this only 
            manipulates your local file system
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.CreateDirectoryIfNotExists(System.String)">
            <summary>
            Creates the directory if it doesnt exist. NOTE: Not compatible when executing tests on the Grid, as this only 
            manipulates your local file system
            </summary>
            <param name="fullPath"></param>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.WaitForFile(System.String,System.Double)">
            <summary>
            Checks for the file once every second until the file exists and is not locked or the timeout is reached.
            NOTE: Not compatible when executing tests on the Grid, as this only manipulates your local file system
            </summary>
            <param name="filePath">The relative or absolute path to a file.</param>
            <param name="fileWaitTimeout">The timeout for this operation to keep trying in milliseconds.  Default is 10000 (10 seconds).</param>
            <exception cref="T:System.TimeoutException">Thrown if the file does not exist within the timeout specified.</exception>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.UploadFileWithAutoIt(OpenQA.Selenium.IWebElement,System.String,System.String,System.String)">
            <summary>
            
            s any file through the windows upload file window using Autoit. For an explanation, 
            see: https://code.premierinc.com/docs/display/PGHLMSDOCS/Uploading+Files
            Note that this only works in Chrome locally. For full compatibility of uploading files,
            <see cref="!:UploadFileUsingsendKeys(IWebDriver, IWebElement, string)"/>
            </summary>
            <param name="browseBtnElem">The Browse button element</param>
            <param name="scriptFileLocation">The AutoIt script file. Our upload script is called FileUpload.au3 and should be located here: C:\SeleniumAutoIt</param>
            <param name="browserName">Either "chrome", "firefox" or "internetexplorer"</param>
            <param name="fileToUploadLocation">The file location and file name. i.e. C:\SeleniumAutoIt\test.txt.txt</param>
        </member>
        <member name="M:Browser.Core.Framework.FileUtils.UploadFileUsingSendKeys(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement,System.String,Browser.Core.Framework.Page,OpenQA.Selenium.By)">
            <summary>
            Uploads a file by directly sending the file path to the JQuery File Upload browse button. To 
            determine if your application is compatible (it uses the JQuery file upload system), there 
            should be an input tag in your HTML representing the browse/fileupload/etc button (Note
            that this button may be hidden under a browse button that doesnt meet these requirements).
            This Input element should have an attribute titled "type", and it's attribute value should be
            "file". The file you upload should either live on your local file system, and if not, should 
            live on ALL Grid nodes. If the file is not on the Grid, but on your local, there is code in 
            place to transfer that file via JSon Wire Protocol to the Node for your upload. To see where 
            that code lives, see the end of the method inside <see cref="M:Browser.Core.Framework.BrowserTest.CreateBrowser"/>. 
            If you find this doesnt work, then tell your developer to change this element from multiple
            to single. Further reading: 
            https://stackoverflow.com/questions/27331884/selenium-chromedriver-sendkeys-breaks-jquery-file-upload-plugin 
            </summary> 
            <param name="Browser">The driver instance</param>
            <param name="browseBtnElem">The browse button of IWebElement type, which should be the Input tag with an 
            attribute of "type", with an attribute value of "file". See summary above for further explanation </param>
            <param name="filePath">IMPORTANT: The full path, including the filename, BUT for Fireball apps, you must do 
            two things. 1. Store the file path inside of a variable THEN pass that variable to this argument. 2. Do not 
            use String.Format or the @ symbol when forming your file path string. It must be a string inside two double 
            quotes and the back slashes should be escape sequenced. If you dont do these things, for some reason, it 
            throws an Invalid Argument. Note that if you sent a file path that did not contain the correct filename 
            or just an incorrect folder location, you would also get Invalid Argument</param>
            <param name="pageToWaitFor">(Optional). There are multiple options to wait after uploading. You can send a 
            Page object and wait for the page to load, or you can send an IWebElement and wait for it to become 
            visible, or wait a static amount of time</param>
            <param name="elemToWaitFor">(Optional). There are multiple options to wait after uploading. You can send a 
            Page object and wait for the page to load, or you can send an IWebElement and wait for it to become 
            visible, or wait a static amount of time</param>
        </member>
        <member name="T:Browser.Core.Framework.MyWorkBook">
            <summary>
            
            </summary>
        </member>
        <member name="T:Browser.Core.Framework.MyWorkSheets">
            <summary>
            
            </summary>
        </member>
        <member name="T:Browser.Core.Framework.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="T:Browser.Core.Framework.Child">
            <summary>
            
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.Utils.GraphUtils.GetHighChartDataTable(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement)">
            <summary>
            Gets a <see cref="T:System.Data.DataTable"/> equivalent of the data behind the specified highchart
            </summary>
            <param name="browser">The driver instance</param>
            <param name="chartElem">The chart element</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.Utils.GraphUtils.GetHighChartJSON(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement)">
            <summary>
            Gets the data of a specified chart in JSON format
            </summary>
            <param name="browser">The driver instance</param>
            <param name="chartElem">The chart element</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.Utils.GraphUtils.TransformJSON(System.String,OpenQA.Selenium.IWebElement)">
            <summary>
            I have to create a JQuery function to return me a pre-organized JSON equivalent of the EPA Observation Count chart. 
            Until I do, we get the JSON unorganized, and then organize it ourselves with this method
            </summary>
            <param name="json">The JSON representing one of the high charts</param>
            <param name="chartElem">The chart element</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.PerformanceUtils.StoreResultsInCSV(System.String,System.DateTime,System.DateTime)">
            <summary>
            Stores the performance timing information into a CSV file. Do not refactor this to use StopWatch, as the
            StopWatch class has issues with parallel testing. We are just subtracting end date from start date
            </summary>
            <param name="testDesc">The description of the test</param>
            <param name="startDt">The date and time when the performance requirement started <see cref="P:System.DateTime.Now"/></param>
            <param name="endDt">The date and time when the performance requirement ended <see cref="P:System.DateTime.Now"/></param>
        </member>
        <member name="T:Browser.Core.Framework.SearchUtils">
            <summary>
            Extension methods for finding elements within the DOM.  None of these methods wait for elements to be available.  See WaitUtils for that capability.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.SearchUtils.Exists(OpenQA.Selenium.ISearchContext,OpenQA.Selenium.By,Browser.Core.Framework.ICriteria{OpenQA.Selenium.IWebElement}[])">
            <summary>
            Verifies that an element exists (within the given context) that matches all specified criteria
            </summary>
            <param name="context"></param>
            <param name="by"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.SearchUtils.FindElementOrDefault(OpenQA.Selenium.ISearchContext,OpenQA.Selenium.By,Browser.Core.Framework.ICriteria{OpenQA.Selenium.IWebElement}[])">
            <summary>
            Finds a descendent element that matches the specified criteria.  If the element cannot be found, null is returned.
            </summary>
            <param name="context">The context.</param>
            <param name="by">The by.</param>
            <param name="criteria">The criteria.</param>
            <returns>The found element, or null</returns>
        </member>
        <member name="M:Browser.Core.Framework.SearchUtils.FindElement(OpenQA.Selenium.ISearchContext,OpenQA.Selenium.By,Browser.Core.Framework.ICriteria{OpenQA.Selenium.IWebElement}[])">
            <summary>
            Finds the FIRST element that matches the search and criteria.  Throws a NotFoundException if NO
            elements match the search criteria.
            </summary>
            <param name="context">The context.</param>
            <param name="by">The by.</param>
            <param name="criteria">The criteria.</param>
            <returns></returns>        
        </member>
        <member name="M:Browser.Core.Framework.SearchUtils.FindElements(OpenQA.Selenium.ISearchContext,OpenQA.Selenium.By,Browser.Core.Framework.ICriteria{OpenQA.Selenium.IWebElement}[])">
            <summary>
            Finds all the elements that match the specified search condition and criteria.
            </summary>
            <param name="context">The context in which the search should occur.</param>
            <param name="by">The condition by which the search should occur.</param>
            <param name="criteria">Additional criteria that the elements must satisfy.</param>
            <returns>The elements that match search and criteria, or an empty list if none are found.</returns>
        </member>
        <member name="M:Browser.Core.Framework.SearchUtils.ThrowNotFoundException(OpenQA.Selenium.By,System.Collections.Generic.IEnumerable{OpenQA.Selenium.IWebElement},System.Collections.Generic.IEnumerable{Browser.Core.Framework.ICriteria{OpenQA.Selenium.IWebElement}})">
            <summary>
            The main purpose of this method is formatting the message of the Exception that gets thrown.
            </summary>
            <param name="by">The by.</param>
            <param name="elementsMatchingBy">The elements to be considered.</param>
            <param name="criteria">The criteria that must be matched.</param>
            <exception cref="T:OpenQA.Selenium.NotFoundException"></exception>
        </member>
        <member name="T:Browser.Core.Framework.SerializationUtils">
            <summary>
            Class that utilizes Newtonsoft Json libraries to deserialize json text to c# objects for use with linq
            </summary>
        </member>
        <member name="T:Browser.Core.Framework.WaitUtils">
            <summary>
            Extension methods that allow waiting for particular critieria to become true.
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.WaitUtils.Timeout">
            <summary>
            The default timeout used for all methods is 30 seconds (unless otherwise specified).
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.WaitUtils.WaitUntil``1(``0,Browser.Core.Framework.ICriteria{``0})">
            <summary>
            Waits the until the specified criteria is true. If the default timeout occurs, an exception will be thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input">The input.</param>
            <param name="criteria">The criteria to be met.</param>
        </member>
        <member name="M:Browser.Core.Framework.WaitUtils.WaitUntil``1(``0,System.TimeSpan,Browser.Core.Framework.ICriteria{``0})">
            <summary>
            Waits the until the specified criteria is true. If the timeout occurs, an exception will be thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input">The input.</param>
            <param name="timeout">The timeout.</param>
            <param name="criteria">The criteria to be met.</param>
        </member>
        <member name="M:Browser.Core.Framework.WaitUtils.WaitUntilAll``1(``0,Browser.Core.Framework.ICriteria{``0}[])">
            <summary>
            Waits the until ALL of the specified criteria are true. If the default timeout occurs, an exception will be thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input">The input.</param>
            <param name="criteria">The criteria to be met.</param>
        </member>
        <member name="M:Browser.Core.Framework.WaitUtils.WaitUntilAll``1(``0,System.TimeSpan,Browser.Core.Framework.ICriteria{``0}[])">
            <summary>
            Waits the until ALL of the specified criteria are true. If the timeout occurs, an exception will be thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input">The input.</param>
            <param name="timeout">The timeout.</param>
            <param name="criteria">The criteria to be met.</param>
        </member>
        <member name="M:Browser.Core.Framework.WaitUtils.WaitUntilAny``1(``0,Browser.Core.Framework.ICriteria{``0}[])">
            <summary>
            Waits the until ANY of the specified criteria are true. If the default timeout occurs, an exception will be thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input">The input.</param>
            <param name="criteria">The criteria to be met.</param>
        </member>
        <member name="M:Browser.Core.Framework.WaitUtils.WaitUntilAny``1(``0,System.TimeSpan,Browser.Core.Framework.ICriteria{``0}[])">
            <summary>
            Waits the until ANY of the specified criteria are true. If the timeout occurs, an exception will be thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input">The input.</param>
            <param name="timeout">The timeout.</param>
            <param name="criteria">The criteria to be met.</param>
        </member>
        <member name="M:Browser.Core.Framework.WaitUtils.WaitForElement(OpenQA.Selenium.ISearchContext,OpenQA.Selenium.By,Browser.Core.Framework.ICriteria{OpenQA.Selenium.IWebElement}[])">
            <summary>
            Waits until a descendent element is available that matches the specified criteria.  If the default timeout expires before a matching element 
            is found, an exception is thrown.
            </summary>
            <param name="context">The context from which the search should be executed.</param>
            <param name="by">The by.</param>
            <param name="criteria">The criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.WaitUtils.WaitForElement(OpenQA.Selenium.ISearchContext,OpenQA.Selenium.By,System.TimeSpan,Browser.Core.Framework.ICriteria{OpenQA.Selenium.IWebElement}[])">
            <summary>
            Waits until a descendent element is available that matches the specified criteria.  If the timeout expires before a matching element 
            is found, an exception is thrown.
            </summary>
            <param name="context">The context from which the search should be executed.</param>
            <param name="by">The by.</param>
            <param name="timeout">The timeout.</param>
            <param name="criteria">The criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.WaitUtils.WaitForSelectElement(OpenQA.Selenium.ISearchContext,OpenQA.Selenium.By,Browser.Core.Framework.ICriteria{OpenQA.Selenium.IWebElement}[])">
            <summary>
            Waits until a descendent element is available that matches the specified criteria.  If the default timeout expires before a matching element is found, an exception is thrown.
            </summary>
            <param name="context">The context from which the search should be executed.</param>
            <param name="by">The by.</param>
            <param name="criteria">The criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.WaitUtils.WaitForSelectElement(OpenQA.Selenium.ISearchContext,OpenQA.Selenium.By,System.TimeSpan,Browser.Core.Framework.ICriteria{OpenQA.Selenium.IWebElement}[])">
            <summary>
            Waits until a descendent element is available that matches the specified criteria.  If the timeout expires before a matching element is found, an exception is thrown.
            </summary>
            <param name="context">The context from which the search should be executed.</param>
            <param name="by">The by.</param>
            <param name="timeout">The timeout.</param>
            <param name="criteria">The criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Browser.Core.Framework.WaitUtils.WaitAndClickAlert(OpenQA.Selenium.IWebDriver,System.TimeSpan)">
            <summary>
            Clicks the Alert window if it pops up. To manually invoke an alert window for debugging purposes, enter this into the Console
            window... window.alert('hello')
            </summary>
            <param name="Browser"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Browser.Core.Framework.WaitUtils.WaitJSAndJQuery(OpenQA.Selenium.IWebDriver,System.TimeSpan)">
            <summary>
            Waits for all Javascript and JQuery requests to be completed
            For details, see https://www.swtestacademy.com/selenium-wait-javascript-angular-ajax/
            https://stackoverflow.com/questions/25062969/testing-angularjs-with-selenium
            https://stackoverflow.com/questions/4189312/capturing-javascript-error-in-selenium
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Browser.Core.Framework.WaitUtils.WaitJSAndJQuery(OpenQA.Selenium.IWebDriver)">
            <summary>
            Waits for all Javascript and JQuery requests to be completed
            For details, see https://www.swtestacademy.com/selenium-wait-javascript-angular-ajax/
            https://stackoverflow.com/questions/25062969/testing-angularjs-with-selenium
            https://stackoverflow.com/questions/4189312/capturing-javascript-error-in-selenium
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.WaitUtils.WaitJSAndJQueryAndAngular(OpenQA.Selenium.IWebDriver,System.TimeSpan)">
            <summary>
            Waits for all Javascript, JQuery and Angular requests to be completed
            For details, see https://www.swtestacademy.com/selenium-wait-javascript-angular-ajax/
            https://stackoverflow.com/questions/25062969/testing-angularjs-with-selenium
            https://stackoverflow.com/questions/4189312/capturing-javascript-error-in-selenium
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Browser.Core.Framework.WaitUtils.WaitJSAndJQueryAndAngular(OpenQA.Selenium.IWebDriver)">
            <summary>
            Waits for all Javascript, JQuery and Angular requests to be completed
            For details, see https://www.swtestacademy.com/selenium-wait-javascript-angular-ajax/
            https://stackoverflow.com/questions/25062969/testing-angularjs-with-selenium
            https://stackoverflow.com/questions/4189312/capturing-javascript-error-in-selenium
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.WaitUtils.WaitJSAndJQueryAndAngularStable(OpenQA.Selenium.IWebDriver,System.TimeSpan)">
            <summary>
            Waits for all Javascript, JQuery and Angular requests to be completed for NOR SAP application,
            which is developed using latest Angular version (ng-version="6.0.7")
            For details, see https://www.swtestacademy.com/selenium-wait-javascript-angular-ajax/
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Browser.Core.Framework.WaitUtils.WaitForPopup(OpenQA.Selenium.IWebDriver,System.TimeSpan,OpenQA.Selenium.By[])">
            <summary>
            Waits for a popup to load before proceeding with the test. Specically, it waits for an element(s) on a popup to load
            </summary>
            <param name="by">Any elements on your popup, of type By. <see cref="!:CBDLearnerPageBys"/></param>
            <param name="browser"> The IWebDriver</param>
            <param name="ts"> The maximum amount of time you want to wait for the window to load. i.e. TimeSpan.FromSeconds(180)</param>
        </member>
        <member name="T:Browser.Core.Framework.WaitUtils.SearchContextWait">
            <summary>
            Defines a Wait object that will wait on some criteria of an ISearchContext.
            This is preferable to the WebDriverWait, because there are many scenarios where
            we want to wait until we find a certain object within an ISearchContext, but we
            don't readily have access to the IWebDriver
            </summary>
        </member>
        <member name="F:Browser.Core.Framework.WaitUtils.SearchContextWait.DefaultPollingInterval">
            <summary>
            Gets or sets the default polling interval to use when waiting for criteria.  The default is 500ms, which is the same
            as the WebDriverWait class.
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.WaitUtils.SearchContextWait.#ctor(OpenQA.Selenium.ISearchContext,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Browser.Core.Framework.WaitUtils.SearchContextWait"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Browser.Core.Framework.WebApiServices.CommaList(System.Collections.Generic.List{System.String})">
            <summary>
            Helper to add http commas into request
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Browser.Core.Framework.XpathUtils">
            <summary>
            A utility class retreiving elements through various methods
            </summary>
        </member>
        <member name="M:Browser.Core.Framework.XpathUtils.GetParentOrChildElemWithSpecifiedCriteria(OpenQA.Selenium.IWebElement,System.String,System.String)">
            <summary>
            Gets a parent or child element of your  element. You specify what criteria the parent element must meet to be found
            see https://stackoverflow.com/questions/3005370/xpath-to-find-nearest-ancestor-element-that-contains-an-element-that-has-an-attr
            </summary>
            <param name="elem">The element</param>
            <param name="criteriaForParentElem">The specific criteria to find the parent element. For example, send "tr[1]" to find
            <param name="parentOrChild"/>Either "parent" or "child"
            the first parent element with the tr tag. Or send "div[@role='radiogroup']" to find a parent elem with a div tag, that
            contains a role attribute that equals radiogroup</param>
            <returns></returns>
        </member>
    </members>
</doc>
